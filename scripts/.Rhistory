mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + avg_respT + (1|sample), data = flux_relabund)
mod_with_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + temp + wall_thickness_mm + (1|sample),
data = flux_relabund[!is.na(flux_relabund$wall_thickness_mm), ])
mod_with_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + avg_respT + wall_thickness_mm + (1|sample),
data = flux_relabund[!is.na(flux_relabund$wall_thickness_mm), ])
Anova(mod_without_wall, type = "III")
Anova(mod_with_wall, type = "III")
flux_relabund[!is.na(flux_relabund$wall_thickness_mm), ]
str(flux_relabund)
flux_relabund$species <- as.factor(flux_relabund$species)
str(flux_relabund)
# add wall thickness and temperature to the model
mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + species + avg_respT + (1|sample), data = flux_relabund)
Anova(mod_without_wall, type = "III")
mod_with_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + species + avg_respT + wall_thickness_mm + (1|sample),
data = flux_relabund[!is.na(flux_relabund$wall_thickness_mm), ])
Anova(mod_with_wall, type = "III")
Anova(mod_without_wall, type = "III")
# add wall thickness and temperature to the model
mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund + species + avg_respT + (1|sample), data = flux_relabund)
# add wall thickness and temperature to the model
mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + species + avg_respT + (1|sample), data = flux_relabund)
Anova(mod_without_wall, type = "III")
flux_relabund$predicted_flux <- predict(mod_without_wall)
predict(mod_without_wall)
flux_relabund$predicted_flux <- predict(mod_without_wall)
flux_relabund$predicted_flux
length(flux_relabund)
View(flux_relabund)
# add wall thickness and temperature to the model
mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + species + avg_respT + (1|sample), data = flux_relabund)
flux_relabund$predicted_flux <- predict(mod_without_wall)
flux_relabund$predicted_flux <- predict(mod_without_wall, newdata = flux_relabund, re.form = NULL)
library(ggeffects)
ggpredict(mod_without_wall, terms = c("resampled_relabund_scaled", "species", "avg_respT")) %>% plot(add.data = TRUE)
ggpredict(mod_without_wall, terms = c("species", "avg_respT")) %>% plot(add.data = TRUE)
var_comps <- VarCorr(mod_without_wall)
var_comps
# add wall thickness and temperature to the model
mod_without_wall <- lmer(flux.CH4 ~ resampled_relabund_scaled + species + avg_respT + (1|sample), data = flux_relabund)
Anova(mod_without_wall, type = "III")
VarCorr(mod_without_wall)
p_fluxes_f <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/p_fluxes_f.csv")
all_fluxes_mound_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound_avg.csv")
all_fluxes_mound <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
all_fluxes_resample_reps_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_resample_reps_avg.csv")
all_fluxes_daily <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_daily_fluxes.csv")
# random effects model
model <- lmer(flux.CH4 ~ 1 + (1 | ID_mound), data = all_fluxes_mound)
summary(model)
ranova(model) # signifiacnt random effect means that intramound variation matters
# intraclass correlation coefficient
icc <- as.numeric(VarCorr(model)$ID_mound) /
(as.numeric(VarCorr(model)$ID_mound) + attr(VarCorr(model), "sc")^2)
# interpretation: ~34.8% of the total variation in CH4 flux is due to differences between mounds, while ~65.2% is due to variation within mounds
# need to retain the random effect in subsequent models
# visualisation of within and between mound variation
ggplot(all_fluxes_mound, aes(x = ID_mound, y = flux.CH4)) +
geom_boxplot() +
theme_minimal() +
labs(title = "CH4 Flux Variation Within and Between Mounds",
x = "Mound ID",
y = "CH4 Flux") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
View(t)
# get rid of rows 1, 2
t <- t[-c(1,2),]
# may 2022
m22 <- t[grepl("/5/2022", t$TIMESTAMP), ]
View(m22)
m22_avg <- mean(m22$AirTC_Avg)
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
str(m22$AirTC_Avg)
t$AirTC_Avg <- as.numeric(t$AirTC_Avg)
# may 2022
m22 <- t[grepl("/5/2022", t$TIMESTAMP), ]
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
m22_avg
# november 2022
n22 <- t[grepl("/11/2022", t$TIMESTAMP), ]
View(n22)
# calculate average monthly temperature
t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
View(t)
# get rid of rows 1, 2
t <- t[-c(1,2),]
t$AirTC_Avg <- as.numeric(t$AirTC_Avg)
# may 2022
m22 <- t[grepl("/5/2022", t$TIMESTAMP), ]
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
n22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
n22_avg <- mean(n22$AirTC_Avg, na.rm = TRUE)
# august 2023
a23 <- t[grepl("/08/2023", t$TIMESTAMP), ]
View(a23)
# august 2023
a23 <- t[grepl("/2023", t$TIMESTAMP), ]
View(a23)
# august 2023
a23 <- t[grepl("/8/2023", t$TIMESTAMP), ]
View(a23)
# august 2023
a23 <- t[grepl("/2023", t$TIMESTAMP), ]
a23_avg <- mean(a23$AirTC_Avg, na.rm = TRUE)
# february 2024
f24 <- t[grepl("/2024", t$TIMESTAMP), ]
View(t)
library(lubridate)
library(ggplot2)
library(scales)
library(nasapower)
install.packages("nasapower")
library(nasapower)
library(dplyr)
library(plotly)
# download data from NASA POWER
library(nasapower)
# download data from NASA POWER
sites_lonlat <- data_frame(site = c("STCK")) %>%
mutate( longitude = case_when(site == "STCK" ~ 145.2406),
latitude = case_when(site == "STCK" ~ -16.61158))
POWER_dat <- data.frame()
for(x in 1:1){
P1 <- get_power(community = "sb",
lonlat = c(sites_lonlat[[x,2]],sites_lonlat[[x,3]]),
pars = c("T2M","RH2M","PRECTOTCORR","PS","WS2M","ALLSKY_SFC_SW_DWN","CLRSKY_SFC_SW_DWN","SZA","ALLSKY_SFC_LW_DWN"),
dates = c("2018-01-01","2023-03-1"),
temporal_api = "hourly",
time_standard = "LST") %>%
mutate(site = sites_lonlat[[x,1]])
POWER_dat <- rbind(POWER_dat,P1)
}
# format datetime
POWER_dat$Datetime<-with(POWER_dat, ymd_h(paste(YEAR, MM, DD, HR, sep= ' ')))
POWER_dat <- POWER_dat[POWER_dat$T2M != -999.00, ]
# graph temp over year
p <- ggplot(POWER_dat, aes(x = Datetime, y = T2M))+
geom_point(aes(text=MM), colour="red", alpha=1/2)+
scale_x_datetime(labels = date_format("%b-%Y"))
ggplotly(p)
# calculate average monthly temperature
t <- read.csv("/Users/abbeyyatsko/Downloads/2836.ten_min.csv")
View(POWER_dat)
POWER_dat <- data.frame()
for(x in 1:1){
P1 <- get_power(community = "sb",
lonlat = c(sites_lonlat[[x,2]],sites_lonlat[[x,3]]),
pars = c("T2M","RH2M","PRECTOTCORR","PS","WS2M","ALLSKY_SFC_SW_DWN","CLRSKY_SFC_SW_DWN","SZA","ALLSKY_SFC_LW_DWN"),
dates = c("2022-05-01","2024-030-01"),
temporal_api = "hourly",
time_standard = "LST") %>%
mutate(site = sites_lonlat[[x,1]])
POWER_dat <- rbind(POWER_dat,P1)
}
P1 <- get_power(community = "sb",
lonlat = c(sites_lonlat[[x,2]],sites_lonlat[[x,3]]),
pars = c("T2M","RH2M","PRECTOTCORR","PS","WS2M","ALLSKY_SFC_SW_DWN","CLRSKY_SFC_SW_DWN","SZA","ALLSKY_SFC_LW_DWN"),
dates = c("2022-05-01","2024-03-01"),
temporal_api = "hourly",
time_standard = "LST") %>%
mutate(site = sites_lonlat[[x,1]])
POWER_dat <- rbind(POWER_dat,P1)
View(POWER_dat)
View(sites_lonlat)
# may 2022
m22 <- POWER_dat[grepl("2022-05", POWER_dat$YYYYMMDD), ]
View(m22)
m22_avg <- mean(m22$T2M, na.rm = TRUE)
# november 2022
n22 <- POWER_dat[grepl("2022-11", POWER_dat$TIMESTAMP), ]
# november 2022
n22 <- POWER_dat[grepl("2022-11", POWER_dat$YYYYMMDD), ]
View(n22)
n22_avg <- mean(n22$T2M, na.rm = TRUE)
# august 2023
a23 <- POWER_dat[grepl("2023-08", POWER_dat$YYYYMMDD), ]
a23_avg <- mean(a23$T2M, na.rm = TRUE)
View(a23)
# february 2024
f24 <- POWER_dat[grepl("2024-02", POWER_dat$YYYYMMDD), ]
f24_avg <- mean(f24$T2M, na.rm = TRUE)
View(f24)
View(POWER_dat)
# using data from brooklyn HQ
#t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
t <- read.table("/Users/abbeyyatsko/Downloads/2836.ten_min.dat", header = TRUE, sep = "", stringsAsFactors = FALSE)
# using data from brooklyn HQ
#t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
t <- read.delim("/Users/abbeyyatsko/Downloads/2836.ten_min.dat", header = TRUE, stringsAsFactors = FALSE)
# using data from brooklyn HQ
#t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
tt <- read.delim("/Users/abbeyyatsko/Downloads/2836.ten_min.dat", header = TRUE, stringsAsFactors = FALSE)
# using data from brooklyn HQ
#t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
tt <- read.delim("/Users/abbeyyatsko/Downloads/2836.ten_min.dat", header = TRUE, stringsAsFactors = FALSE)
library(readr)
data <- read_csv("/Users/abbeyyatsko/Downloads/2836.ten_min.dat")
View(data)
# print first 30 rows of data
head(data, 30)
print(data, n = 30)
t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
# get rid of rows 1, 2
t <- t[-c(1,2),]
View(t)
# may 2022
m22 <- t[grepl("/5/2022", t$TIMESTAMP), ]
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
View(m22)
m22_avg
mean(m22$AirTC_Avg, na.rm = TRUE)
m22$AirTC_Avg
str(t$AirTC_Avg)
t$AirTC_Avg <- as.numeric(t$AirTC_Avg)
# may 2022
m22 <- t[grepl("/5/2022", t$TIMESTAMP), ]
m22_avg <- mean(m22$AirTC_Avg, na.rm = TRUE)
# november 2022
n22 <- t[grepl("/11/2022", t$TIMESTAMP), ]
n22_avg <- mean(n22$AirTC_Avg, na.rm = TRUE)
# august 2023
a23 <- t[grepl("/8/2023", t$TIMESTAMP), ]
a23_avg <- mean(a23$AirTC_Avg, na.rm = TRUE)
# february 2024
f24 <- t[grepl("/2024", t$TIMESTAMP), ]
f24_avg <- mean(f24$AirTC_Avg, na.rm = TRUE)
f24_avg
# using data from brooklyn HQ
# t <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/supp_data/wtf_hq_awc_ten_min_2023_08_09_17_52_37.csv")
# tt <- read_csv("/Users/abbeyyatsko/Downloads/2836.ten_min.dat")
data <- read.table("/Users/abbeyyatsko/Downloads/HQ_met_export.dat", header=TRUE, skip=1, sep=",")
View(data)
data <- data[-c(1:2),]
str(data$AirTC_Avg)
data$AirTC_Avg <- as.numeric(data$AirTC_Avg)
str(data$AirTC_Avg)
m22 <- data[grepl("2022-05", data$TimeStamp), ]
View(m22)
m22_avg_d <- mean(m22$AirTC_Avg, na.rm = TRUE)
m22_avg_d
# august 2023
a23 <- data[grepl("2023-8", data$TimeStamp), ]
# august 2023
a23 <- data[grepl("2023-08", data$TimeStamp), ]
View(a23)
a23_avg <- mean(a23$AirTC_Avg, na.rm = TRUE)
# november 2022
n22 <- data[grepl("2022-11", data$TimeStamp), ]
n22_avg <- mean(n22$AirTC_Avg, na.rm = TRUE)
# august 2023
a23 <- data[grepl("2023-08", data$TimeStamp), ]
a23_avg <- mean(a23$AirTC_Avg, na.rm = TRUE)
# february 2024
f24 <- POWER_dat[grepl("2024-02", POWER_dat$YYYYMMDD), ]
f24_avg <- mean(f24$T2M, na.rm = TRUE)
# read in 2022-2024 precip data
p22 <- read.csv("/Users/abbeyyatsko/Desktop/precip_MC/MC_precip_22.csv")
View(p22)
View(data)
View(all_fluxes_mound)
View(all_fluxes_mound)
# may 2022
may <- all_fluxes_mound[all_fluxes_mound$month == "may22", ]
View(may)
# may 2022
may <- all_fluxes_mound[all_fluxes_mound$campaign == "may22", ]
# nov 2022
may <- all_fluxes_mound[all_fluxes_mound$campaign == "nov22", ]
# may 2022
may <- all_fluxes_mound[all_fluxes_mound$campaign == "may22", ]
# nov 2022
nov <- all_fluxes_mound[all_fluxes_mound$campaign == "nov22", ]
View(nov)
ids <- unique(nov$sample)
ids
left_join(ids, nov, by = "sample")
ids <- data.frame(unique(nov$sample))
View(ids)
left_join(ids, nov, by = "sample")
colnames(ids) <- "sample"
left_join(ids, nov, by = "sample")
x <- left_join(ids, nov, by = "sample")
View(x)
x <- left_join(nov, ids, by = "sample")
x <- left_join(ids, nov, by = "sample")
x <- left_join(ids, nov$species, by = "sample")
nov <- nov[c("sample", "species"),]
View(nov)
# nov 2022
nov <- all_fluxes_mound[all_fluxes_mound$campaign == "nov22", ]
nov[,c("sample", "species")]
nov <- unique(nov[,c("sample", "species")])
nov
View(nov)
nov$species <- factor(nov$species, levels = c("Ami", "Copto", "Nasuti"))
# aug 2023
aug <- all_fluxes_mound[all_fluxes_mound$campaign == "aug23", ]
aug <- unique(aug[,c("sample", "species")])
aug$species <- factor(aug$species, levels = c("Ami", "Copto", "Nasuti"))
View(aug)
View(aug)
# feb 2024
feb <- all_fluxes_mound[all_fluxes_mound$campaign == "feb24", ]
feb <- unique(feb[,c("sample", "species")])
feb$species <- factor(feb$species, levels = c("Ami", "Copto", "Nasuti"))
View(feb)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
metadata <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/metagenomes_metadata.csv")
top_e <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/q1_top_emitters.csv")
var_e <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/q2_variable_emitters.csv")
fluxes <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
targets <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/targets.csv")
ko <- read.delim("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/ko.table(ReadsPerSample).txt", header = TRUE, sep = "\t")
pathway <- read.delim("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/pathway.table(ReadsPerSample).txt", header = TRUE, sep = "\t")
cazymes <- read.delim("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/CAZy.single.table(ReadsPerSample).txt", header = TRUE, sep = "\t")
fluxes <- fluxes[fluxes$campaign == "may22", ]
fluxes$extract_ID <- paste(fluxes$sample,"-",fluxes$tag, "-", fluxes$position, sep = "")
wt_merge <- wt[, c("ID_measurement", "wall_thickness_mm")]
wt <- fluxes[!is.na(fluxes$wall_thickness_mm), ]
View(fluxes)
metadata <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/metagenomes_metadata.csv")
top_e <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/q1_top_emitters.csv")
var_e <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/q2_variable_emitters.csv")
fluxes <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
targets <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/targets.csv")
wt <- fluxes[!is.na(fluxes$wall_thickness_mm), ]
View(wt)
fluxes <- fluxes[fluxes$campaign == "may22", ]
fluxes$extract_ID <- paste(fluxes$sample,"-",fluxes$tag, "-", fluxes$position, sep = "")
wt_merge <- wt[, c("ID_measurement", "wall_thickness_mm")]
x <- fluxes[, c("ID_measurement", "extract_ID", "flux.CH4", "avg_respT")]
x <- left_join(x, wt_merge, by = "ID_measurement")
View(x)
# merge x and metadata
metadata <- merge(x, metadata, by = "extract_ID")
View(metadata)
metadata <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/data_out/metagenomes_metadata.csv")
# merge x and metadata
out <- left_join(metadata, x, by = "extract_ID")
# merge x and metadata
metadata <- left_join(metadata, x, by = "extract_ID")
View(fluxes)
# pathways
integer_cols <- sapply(pathway, is.integer)
total_reads <- colSums(pathway[, integer_cols])
total_reads_path <- data.frame(
Sample = names(total_reads),
Sum = total_reads,
row.names = NULL
)
# plot distribution of total reads per sample
path_reads <- ggplot(total_reads_path, aes(x = reorder(Sample, -Sum), y = Sum)) +
geom_bar(stat = "identity") +
labs(title = "Pathway table - reads per sample", x = "Total reads", y = "Frequency") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot distribution of total reads per sample
ggplot(total_reads_path, aes(x = reorder(Sample, -Sum), y = Sum)) +
geom_bar(stat = "identity") +
labs(title = "Pathway table - reads per sample", x = "Total reads", y = "Frequency") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
resampled_data <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/resampled_data.csv")
View(resampled_data)
# write.csv(resampled_data, "\\\\am_dsm1821\\BAMspace\\6_staff_folders\\Abbey\\metagenomescopy\\resampled_data.csv")
# resampled_data <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/metagenomes/resampled_data.csv")
resampled_data <- resampled_data[, -1]
# sum of reads by sample
total_reads_resampled <- resampled_data %>%
group_by(sequencing_id) %>%
summarise(Sum = sum(resampled_reads))
total_reads_resampled
# remove columns with insufficient number of reads
pathway_ok <- pathway[ , !names(pathway) %in%
c("A108","A109", "A107", "A38", "A40")]
pathway_ok <- pathway_ok[, -1]
# data to long format
pathway_ok_long <- pathway_ok %>%
pivot_longer(cols = -pathway, names_to = "sequencing_id", values_to = "reads")
# resample for lower limit
total_reads_path <- total_reads_path[!(total_reads_path$Sample %in% c("A108","A109", "A107", "A38", "A40")), ]
lower_limit <- min(total_reads_path$Sum)
total_reads_resampled
pathway_ok_long <- left_join(pathway_ok_long, total_reads_path, by = c("sequencing_id" = "Sample"))
pathway_ok_long$relabund <- pathway_ok_long$reads/pathway_ok_long$Sum
pathway_ok_long %>% group_by(sequencing_id) %>% summarise(Sum_prop = sum(relabund)) -> out
# join with resampled data
pathway_ok_long <- left_join(pathway_ok_long, resampled_data, by = c("sequencing_id", "pathway"))
pathway_ok_long$resampled_sum <- lower_limit
pathway_ok_long$resampled_relabund <- pathway_ok_long$resampled_reads/pathway_ok_long$resampled_sum
ggplot(pathway_ok_long, aes(x = sequencing_id, y = relabund, fill = pathway)) +
geom_bar(stat = "identity") +
labs(title = "Pathway table - relative abundance per sample", x = "Sample", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
methane_pathway <- pathway_ok_long[pathway_ok_long$pathway == "Methane metabolism", ]
ggplot(methane_pathway, aes(x = sequencing_id, y = relabund, fill = sequencing_id)) +
geom_bar(stat = "identity") +
labs(title = "Relative abundance of methane pathway per sample", x = "Sample", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
View(methane_pathway)
# direct comparison
methane_pathway$relabund_diff <- methane_pathway$relabund - methane_pathway$resampled_relabund
ggplot(methane_pathway, aes(x = sequencing_id, y = relabund_diff, fill = sequencing_id)) +
geom_bar(stat = "identity") +
labs(title = "Difference in relative abundance of methane pathway per sample", x = "Sample", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# average relative abundance by pathway
pathway_ok_long %>% group_by(pathway) %>%
summarise(mean_relabund = mean(relabund),
mean_resampled_relabund = mean(resampled_relabund)) -> each_pathway_relabund
ggplot(each_pathway_relabund, aes(x = pathway, y = mean_relabund, fill = pathway)) +
geom_bar(stat = "identity") +
labs(title = "Mean realative abundance per pathway", x = "Pathway", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
c <- ggplot(methane_pathway, aes(x = sequencing_id, y = relabund, fill = sequencing_id)) +
geom_bar(stat = "identity") +
labs(title = "Relative abundance of methane pathway per sample", x = "Sample", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
d <- ggplot(methane_pathway, aes(x = sequencing_id, y = resampled_relabund, fill = sequencing_id)) +
geom_bar(stat = "identity") +
labs(title = "Relative abundance of methane pathway per sample (resampled)", x = "Sample", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
ggarrange(c, d, ncol = 2)
mean_relabund <- mean(methane_pathway$resampled_relabund)
ggplot(each_pathway_relabund, aes(x = pathway, y = mean_resampled_relabund, fill = pathway)) +
geom_bar(stat = "identity") +
labs(title = "Mean realative abundance per pathway", x = "Pathway", y = "Relative abundance") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
geom_hline(yintercept = mean_relabund, linetype = "dashed")
View(each_pathway_relabund)
sum(each_pathway_relabund$mean_resampled_relabund)
sum(each_pathway_relabund$mean_resampled_relabund, na.rm = T)
sum(each_pathway_relabund$mean_relabund, na.rm = T)
flux_relabund <- left_join(methane_pathway, metadata, by = c("sequencing_id"))
flux_relabund$species <- as.factor(flux_relabund$species)
# standardise data by rescaling with mean = 0 and sd = 1
flux_relabund <- flux_relabund %>%
mutate(resampled_relabund_scaled = scale(resampled_relabund))
View(flux_relabund)
# does greater relative abundance of methane metabolism pathway correlate with lower methane flux?
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
summary(mod)
mod <- lmer(flux.CH4 ~ resampled_relabund_scaled + (1|sample), data = flux_relabund)
summary(mod)
Anova(mod)
plot(fitted(mod), resid(mod), xlab = "Fitted values", ylab = "Residuals")
check_model(mod)
check_model(mod)
flux_relabund <- flux_relabund %>%
mutate(resampled_relabund_scaled = standardize(resampled_relabund))
# does greater relative abundance of methane metabolism pathway correlate with lower methane flux?
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point()
mod <- lmer(flux.CH4 ~ resampled_relabund_scaled + (1|sample), data = flux_relabund)
summary(mod)
Anova(mod)
# does greater relative abundance of methane metabolism pathway correlate with lower methane flux?
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
str(flux_relabund)
flux_relabund$resampled_relabund_scaled <- as.numeric(flux_relabund$resampled_relabund_scaled)
# does greater relative abundance of methane metabolism pathway correlate with lower methane flux?
ggplot(flux_relabund, aes(x = resampled_relabund_scaled, y = flux.CH4)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
str(flux_relabund)
check_model(mod)
check_model(mod, check = c("normality", "linearity", "homogeneity"))
check_model(mod, check = c("normality"))
library(performance)
performance::check_model(mod, check = c("normality"))
dev.off()
performance::check_model(mod, check = c("normality"))
dev.off()
options(device = "RStudioGD")
performance::check_model(mod, check = c("normality"))
easystats::easystats_update()
install.packages("easystats")
install.packages("easystats")
library(easystats)
check_model(mod)
quartz()
check_model(mod, check = "normality")
getOption("device")
options(device = "default")
options(device = "default")

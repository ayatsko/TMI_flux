# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mmol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mmol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
# merge metadata back in to flux files
# CO2
meta_TMI <- meta_TMI %>%
rename(Time_start = fDOY_start)
CO2_fluxfinal <- merge(fluxes.CO2, meta_TMI, by="Time_start")
# CH4
CH4_fluxfinal <- merge(fluxes.CH4, meta_TMI, by="Time_start")
View(CO2_fluxfinal)
View(CH4_fluxfinal)
warnings()
View(temp1)
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/temp1$chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mmol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/temp2$chamber_SA_m2 # chamber surface area
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
View(fluxes.CH4)
# merge metadata back in to flux files
# CO2
meta_TMI <- meta_TMI %>%
rename(Time_start = fDOY_start)
CO2_fluxfinal <- merge(fluxes.CO2, meta_TMI, by="Time_start")
# CH4
CH4_fluxfinal <- merge(fluxes.CH4, meta_TMI, by="Time_start")
## Export fluxes as .csv file
# CO2 (units are mmol/day)
write.csv(CO2_fluxfinal_SA,"/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv", row.names = FALSE)
CO2_fluxfinal_SA <- merge(fluxes.CO2, meta_TMI, by="Time_start")
# CH4
CH4_fluxfinal_SA <- merge(fluxes.CH4, meta_TMI, by="Time_start")
## Export fluxes as .csv file
# CO2 (units are mmol/day)
write.csv(CO2_fluxfinal_SA,"/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv", row.names = FALSE)
# CH4 (units are umol/day)
write.csv(CH4_fluxfinal_SA,"/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggpubr)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinalTMI.csv")
species <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/Abbey termites .xlsx - Sheet1.csv")
species <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final, CO2_fluxfinal
species <- species %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, species, by = c("sample"))
CO2_fluxfinal <- merge(CO2_fluxfinal, species, by = c("sample"))
View(CO2_fluxfinal)
# new column for methane:co2
# first need to convert CO2 from mmol to umol (in order to match CH4 in units of umol)
# (conversion factor 1000umol = 1mmol)
CO2_fluxfinal$flux.CO2_umol <- CO2_fluxfinal$flux.CO2*1000
CO2_fluxfinal <- CO2_fluxfinal %>% relocate(flux.CO2_umol, .after = flux.CO2)
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
View(CH4_fluxfinal)
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(ch4_co2, .after = flux.CH4)
# subset df to create just soils and just mounds (for later on. just to have df prepped)
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
# mounds all, colored by species
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "mound")
# soils all, colored by species
a2 <- ggplot(data = soils, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "soil")
ggarrange(a1, a2, ncol=1)
# mounds all, colored by species
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab(CH4 flux umol/d/m2)
# mounds all, colored by species
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab(CH4 flux umol/d/m2)+
labs(title = "mound")
# mounds all, colored by species
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab(CH4 flux umol/d/m2)+
labs(title = "mound")
# mounds all, colored by species
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("CH4 flux umol/d/m2")+
labs(title = "mound")
a1
# soils all, colored by species
a2 <- ggplot(data = soils, aes(x = as.factor(sample), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("CH4 flux umol/d/m2")+
labs(title = "soil")
ggarrange(a1, a2, ncol=1)
# same as above but with CH4:CO2
a3 <- ggplot(data = mounds, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "mound")
a4 <- ggplot(data = soils, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "soil")
ggarrange(a3, a4, ncol=1)
# same as above but with CH4:CO2
a3 <- ggplot(data = mounds, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "mound")
a4 <- ggplot(data = soils, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "soil")
ggarrange(a3, a4, ncol=1)
# same as above but with CH4:CO2
a3 <- ggplot(data = mounds, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylim(50)
# same as above but with CH4:CO2
a3 <- ggplot(data = mounds, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylim(0,50)
ggarrange(a3, a4, ncol=1)
a4 <- ggplot(data = soils, aes(x = as.factor(sample), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylim(0,2.5)+ # for outliers
labs(title = "soil")
ggarrange(a3, a4, ncol=1)
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme_light()
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-1, 50))
ggarrange(e, f, ncol = 1)
g <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_point(aes(col=position), position = "jitter")+
ylab("CH4 flux umol/d/m2")+
theme_light()
g
d1 <- ggplot(data = mounds, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
ylab("CH4 flux umol/d/m2")+
theme_light()
d2 <- ggplot(data = mounds, aes(x = as.factor(directon), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
ggarrange(d1, d2, ncol = 1)
c1 <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme_light()
c2 <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
theme_light()
ggarrange(c1, c2, ncol = 1)
d2 <- ggplot(data = mounds, aes(x = as.factor(directon), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
ylim(0,50)+ # for outliers
theme_light()
ggarrange(d1, d2, ncol = 1)
d1 <- ggplot(data = mounds, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
ylab("CH4 flux umol/d/m2")+
theme_light()
d2 <- ggplot(data = mounds, aes(x = as.factor(directon), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
ylim(0,50)+ # for outliers
theme_light()
ggarrange(d1, d2, ncol = 1)
c1 <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme_light()
c2 <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = ch4_co2, fill = ID_cleaned)) +
geom_boxplot()+
ylim(0,50)+ # for outliers
theme_light()
ggarrange(c1, c2, ncol = 1)
time <- read.csv("/Users/abbeyyatsko/Downloads/mound_gps (1).csv")
View(time)
time <- time[c("name", "realtime")]
View(time)
View(CH4_fluxfinal)
time <- read.csv("/Users/abbeyyatsko/Downloads/mound_gps (1).csv")
time <- time[c("name", "realtime")]
names(time)[1] <- 'sample'
CH4_fluxfinal <- merge(CH4_fluxfinal, time, by = c("sample"))
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(realtime, .after = time)
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(realtime, .after = Time_start)
str(CH4_fluxfinal)
CH4_fluxfinal$realtime <- as.Date(CH4_fluxfinal$realtime)
str(CH4_fluxfinal)
# scatter plot for flux by time of day
h <- ggplot(data = CH4_fluxfinal, x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)+
geom_boxplot()+
theme_light()
h
h <- ggplot(data = CH4_fluxfinal, x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)+
geom_boxplot()+
theme_light()
h
# scatter plot for flux by time of day
g <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
geom_point(aes(col=position), position = "jitter")+
ylab("CH4 flux umol/d/m2")+
theme_light()
g
# scatter plot for flux by time of day
g <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme_light()
# scatter plot for flux by time of day
g <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme_light()
g
# merge in real time data from GPS records of mound being tagged (this is an overall mound estimate)
time <- read.csv("/Users/abbeyyatsko/Downloads/mound_gps (1).csv")
time <- time[c("name", "realtime")]
names(time)[1] <- 'sample'
CH4_fluxfinal <- merge(CH4_fluxfinal, time, by = c("sample"))
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(realtime, .after = Time_start)
# merge in real time data from GPS records of mound being tagged (this is an overall mound estimate)
time <- read.csv("/Users/abbeyyatsko/Downloads/mound_gps (1).csv")
time <- time[c("name", "realtime")]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggpubr)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinalTMI.csv")
species <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/Abbey termites .xlsx - Sheet1.csv")
species <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final, CO2_fluxfinal
species <- species %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, species, by = c("sample"))
CO2_fluxfinal <- merge(CO2_fluxfinal, species, by = c("sample"))
# new column for methane:co2
# first need to convert CO2 from mmol to umol (in order to match CH4 in units of umol)
# (conversion factor 1000umol = 1mmol)
CO2_fluxfinal$flux.CO2_umol <- CO2_fluxfinal$flux.CO2*1000
CO2_fluxfinal <- CO2_fluxfinal %>% relocate(flux.CO2_umol, .after = flux.CO2)
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(ch4_co2, .after = flux.CH4)
# subset df to create just soils and just mounds (for later on. just to have df prepped)
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
# merge in real time data from GPS records of mound being tagged (this is an overall mound estimate)
time <- read.csv("/Users/abbeyyatsko/Downloads/mound_gps (1).csv")
time <- time[c("name", "realtime")]
names(time)[1] <- 'sample'
CH4_fluxfinal <- merge(CH4_fluxfinal, time, by = c("sample"))
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(realtime, .after = Time_start)
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
ggarrange(g1, g2, ncol = 1)
# scatter plot for flux by time of day (for mounds)
g1 <- ggplot(data = mounds, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme_light()
# scatter plot for flux by time of day (for mounds)
g2 <- ggplot(data = soils, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme_light()
ggarrange(g1, g2, ncol = 1)
theme(axis.text.x=element_text(angle = -90, hjust = 0)+
g1
# scatter plot for flux by time of day (for mounds)
g1 <- ggplot(data = mounds, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
theme(axis.text.x=element_text(angle = -90, hjust = 0))+
ylab("CH4 flux umol/d/m2")+
theme_light()
g1
# scatter plot for flux by time of day (for mounds)
g1 <- ggplot(data = mounds, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
coord_flip()
g1
# scatter plot for flux by time of day (for mounds)
g1 <- ggplot(data = mounds, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
scale_x_discrete(guide = guide_axis(angle = 90)) +
theme_light()
g1
# scatter plot for flux by time of day (for mounds)
g2 <- ggplot(data = soils, aes(x = as.factor(realtime), y = flux.CH4, fill = ID_cleaned)) +
geom_boxplot()+
ylab("CH4 flux umol/d/m2")+
scale_x_discrete(guide = guide_axis(angle = 90)) +
theme_light()
ggarrange(g1, g2, ncol = 1)
g1
unique(CH4_fluxfinal$ID_cleaned)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinalTMI.csv")
species <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/Abbey termites .xlsx - Sheet1.csv")
species <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final, CO2_fluxfinal
species <- species %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, species, by = c("sample"))
CO2_fluxfinal <- merge(CO2_fluxfinal, species, by = c("sample"))
# new column for methane:co2
# first need to convert CO2 from mmol to umol (in order to match CH4 in units of umol)
# (conversion factor 1000umol = 1mmol)
CO2_fluxfinal$flux.CO2_umol <- CO2_fluxfinal$flux.CO2*1000
CO2_fluxfinal <- CO2_fluxfinal %>% relocate(flux.CO2_umol, .after = flux.CO2)
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(ch4_co2, .after = flux.CH4)
# subset df to create just soils and just mounds (for later on. just to have df prepped)
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
unique(CH4_fluxfinal$ID_cleaned)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinalTMI.csv")
species <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/Abbey termites .xlsx - Sheet1.csv")
species <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final, CO2_fluxfinal
species <- species %>%
rename(sample = X)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggpubr)
# merge sp and CH4flux_final, CO2_fluxfinal
species <- species %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, species, by = c("sample"))
CO2_fluxfinal <- merge(CO2_fluxfinal, species, by = c("sample"))
# new column for methane:co2
# first need to convert CO2 from mmol to umol (in order to match CH4 in units of umol)
# (conversion factor 1000umol = 1mmol)
CO2_fluxfinal$flux.CO2_umol <- CO2_fluxfinal$flux.CO2*1000
CO2_fluxfinal <- CO2_fluxfinal %>% relocate(flux.CO2_umol, .after = flux.CO2)
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
CH4_fluxfinal <- CH4_fluxfinal %>% relocate(ch4_co2, .after = flux.CH4)
# subset df to create just soils and just mounds (for later on. just to have df prepped)
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
View(mounds)
unique(mounds$ID_cleaned)
copto <- mounds[mounds$ID_cleaned == 'Copto',]
View(copto)
avgflux_ami <- mean(ami$flux.CH4)
ami <- mounds[mounds$ID_cleaned == 'Ami',]
avgflux_ami <- mean(ami$flux.CH4)
avgflux_nasute <- mean(nasute$flux.CH4) # 3160 umol/m2*d
nasute <- mounds[mounds$ID_cleaned == 'Nasuti',]
avgflux_nasute <- mean(nasute$flux.CH4) # 3160 umol/m2*d
copto <- mounds[mounds$ID_cleaned == 'Copto',]
avgflux_copto <- mean(copto$flux.CH4) # 4847 umol/m2*d
# convert  umol/m2*d to ug/m2*d
avgflux_ami <- avgflux_ami*(1/1000000)*(16.04)*(1000000) # molecular mass conversion to g, then conversion back to ug for comparison
avgflux_nasute <- avgflux_nasute*(1/1000000)*(16.04)*(1000000)
avgflux_copto <- avgflux_copto*(1/1000000)*(16.04)*(1000000)

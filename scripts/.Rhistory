library(easystats)
easystats::easystats_update()
check_model(nest)
check_model(model)
model <- aov(flux.CH4 ~ ID_mound * tag, data=df)
summary(model)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plyr)
library(ggpubr)
library(viridis)
library(tidyr)
library(broom)
library(purrr)
library(tidyverse)
library(rstatix)
library(easystats)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plyr)
library(ggpubr)
library(viridis)
library(tidyr)
library(broom)
library(purrr)
library(tidyverse)
library(rstatix)
library(easystats)
may_CO2 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinal_may22_fixed.csv")
may_CH4 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinal_may22_fixed.csv")
nov_CO2 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinal_nov22_fixed.csv")
nov_CH4 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinal_nov22_fixed.csv")
aug_CO2 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinal_aug23_fixed.csv")
aug_CH4 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinal_aug23_fixed.csv")
aug_day_CO2 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CO2_fluxfinal_aug23_day_fixed.csv")
aug_day_CH4 <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/CH4_fluxfinal_aug23_day_fixed")
# lists of CO2 and CH4 files from different seasons
CH4_all <- list(may_CH4, nov_CH4, aug_CH4)
CO2_all <- list(may_CO2, nov_CO2, aug_CO2)
# create new column for methane:co2
# for each element in list
x <- data.frame(CO2_all[1])
y <- data.frame(CH4_all[1])
full_df <- function(x, y){
# merge CO2 and CH4 df together
all <- full_join(x, y)
# convert CO2 from mmol to umol (in order to match CH4 units, conversion factor 1000umol = 1mmol)
all$flux.CO2_umol <- all$flux.CO2*1000
all <- all %>% relocate(flux.CO2_umol, .after = flux.CO2)
all <- all %>% relocate(flux.CH4, .after = flux.CO2_umol)
all <- all %>% relocate(R2.CH4, .after = R2.CO2)
all <- all %>% relocate(p.CH4, .after = p.CO2)
# define column for ratio of CH4:CO2
all$CH4_CO2 <-  all$flux.CH4/all$flux.CO2_umol
all <- all %>% relocate(CH4_CO2, .after = flux.CH4)
}
out <- lapply(seq_along(CH4_all), function(x) full_df(CH4_all[[x]], CO2_all[[x]]))
all_fluxes <- do.call("rbind.fill", out)
# rename species with scientific names
all_fluxes$species_s <- ifelse(all_fluxes$species == "Ami", "A. laurensis","")
all_fluxes$species_s <- ifelse(all_fluxes$species == "Nasuti", "N. magnus", all_fluxes$species_s)
all_fluxes$species_s <- ifelse(all_fluxes$species == "Copto", "C. acinaciformis", all_fluxes$species_s)
targets1 <- unique(nov_CH4$sample)
targets2 <- unique(aug_CH4$sample)
targets <- union(targets1, targets2)
all_fluxes_resample <- all_fluxes[all_fluxes$sample %in% targets, ]
View(all_fluxes_resample)
# omit soil measurements cause they're not needed right now
all_fluxes_resample <- all_fluxes_resample[all_fluxes_resample$flux_source =="m",]
all_fluxes_resample$tag <- as.factor(all_fluxes_resample$tag)
# create unique ID for mounds in different sampling periods
all_fluxes_resample$ID_mound <- paste(all_fluxes_resample$sample, all_fluxes_resample$campaign, sep = "-")
# create working df for coarse mound averages
mound_avg_flux <- all_fluxes_resample %>% group_by(ID_mound, sample, species_s) %>%
summarise(mean_mound_fluxCH4=mean(flux.CH4),
mean_mound_fluxCO2=mean(flux.CO2_umol),
mean_mound_fluxCH4_CO2=mean(CH4_CO2))
summarize(n = n(flux.CH4)
repeated_counts
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarize(n = n(flux.CH4))
all_fluxes_resample %>% group_by(ID_mound) %>%
summarize(n = n(tag))
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarize(n = n())
repeated_counts
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
count(tag)
all_fluxes_resample %>% group_by(ID_mound) %>%
count()
df2 %>% group_by(type, .drop = FALSE) %>% count(flux.CH4)
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
count(flux.CH4)
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(n=n(flux.CH4))
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(n=n())
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(n=n(ID_mound))
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(n=n(ID_mound), .groups = 'drop')
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(n=n(), .groups = 'drop')
all_fluxes_resample %>% group_by(ID_mound) %>%
summarise(total_count=n(), .groups = 'drop')
# how many measurements were made for each mound in the resampling campaign
repeated_counts <- aggregate(all_fluxes_resample$tag , by=list(all_fluxes_resample$ID_mound ), FUN=length)
agg_df
repeated_counts
# filter those that are <4
good <- repeated_counts$x >3
# filter those that are <4
good <- repeated_counts[repeated_counts$x >3,]
View(good)
good <- good$Group.1
all_fluxes_resample <- all_fluxes_resample[all_fluxes_resample$ID_mound %in% good,]
View(all_fluxes_resample)
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + (1|sample/tag), data=df, REML=TRUE)
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + (1|sample/tag), data=all_fluxes_resample, REML=TRUE)
library(lme4)
library(lmerTest)
anova(model)
rand(model)
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + (1|ID_mound/tag), data=all_fluxes_resample, REML=TRUE)
check_model(model)
all_fluxes_resample <- all_fluxes[all_fluxes$sample %in% targets, ]
# omit soil measurements cause they're not needed right now
all_fluxes_resample <- all_fluxes_resample[all_fluxes_resample$flux_source =="m",]
all_fluxes_resample$tag <- as.factor(all_fluxes_resample$tag)
# create unique ID for mounds in different sampling periods
all_fluxes_resample$ID_mound <- paste(all_fluxes_resample$sample, all_fluxes_resample$campaign, sep = "-")
# how many measurements were made for each mound in the resampling campaign (shoudl be 4 or 5)
repeated_counts <- aggregate(all_fluxes_resample$tag , by=list(all_fluxes_resample$ID_mound ), FUN=length)
# create working df for coarse mound averages
mound_avg_flux <- all_fluxes_resample %>% group_by(ID_mound, sample, species_s) %>%
summarise(mean_mound_fluxCH4=mean(flux.CH4),
mean_mound_fluxCO2=mean(flux.CO2_umol),
mean_mound_fluxCH4_CO2=mean(CH4_CO2))
ID_mound
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + (1|ID_mound/tag), data=all_fluxes_resample, REML=TRUE)
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + ID_mound + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
# nested lmer
model <- lmer(flux.CH4 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
# model with subsample position within individual mound measurement as a random effect
model <- lmer(flux.CO2 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
# model with subsample position within individual mound measurement as a random effect
model <- lmer(CH4_CO2 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
# model with subsample position within individual mound measurement as a random effect
model <- lmer(flux.CH4 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
ggpredict(model, terms = c("species_s", "campaign", "avg_respT")) %>% plot(add.data = TRUE)
library(ggeffects)
ggpredict(model, terms = c("species_s", "campaign", "avg_respT")) %>% plot(add.data = TRUE)
is.na(all_fluxes_resample$avg_respT)
table(is.na(all_fluxes_resample$avg_respT))
table(is.na(all_fluxes_resample$species_s))
table(is.na(all_fluxes_resample$campaign))
ggpredict(model, terms = c("species_s")) %>% plot(add.data = TRUE)
ggpredict(model, terms = c("species_s", "campaign")) %>% plot(add.data = TRUE)
ggpredict(model, terms = c("species_s", "avg_respT")) %>% plot(add.data = TRUE)
ggpredict(model, terms = c("avg_respT", "species_s")) %>% plot(add.data = TRUE)
# model with subsample position within individual mound measurement as a random effect
model <- lmer(flux.CO2 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
ggpredict(model, terms = c("avg_respT", "species_s")) %>% plot(add.data = TRUE)
# model with subsample position within individual mound measurement as a random effect
model <- lmer(flux.CH4 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
ggpredict(model, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)
season_avg <- all_fluxes_resample %>% group_by(species_s, campaign) %>%
summarize(mean_CH4flux = mean(flux.CH4),
mean_CO2flux = mean(flux.CO2),
sd_CH4flux = sd(flux.CH4),
sd_CO2flux = sd(flux.CO2))
season_avg
all_fluxes_resample %>% group_by(species_s, campaign) %>%
summarize(mean_CH4flux = mean(flux.CH4),
mean_CO2flux = mean(flux.CO2),
sd_CH4flux = sd(flux.CH4),
sd_CO2flux = sd(flux.CO2))
# table of averages (by species, season)
detach(package:plyr)
season_avg <- all_fluxes_resample %>% group_by(species_s, campaign) %>%
summarize(mean_CH4flux = mean(flux.CH4),
mean_CO2flux = mean(flux.CO2),
sd_CH4flux = sd(flux.CH4),
sd_CO2flux = sd(flux.CO2))
season_avg
# CO2
model <- lmer(flux.CO2 ~ species_s + campaign + avg_respT + (1|tag), data=all_fluxes_resample, REML=TRUE)
anova(model)
rand(model)
check_model(model)
ggpredict(model, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)
# merge with mound SA
mound_SA <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/moundSA.csv")
mound_SA <- mound_SA[, c('sample', 'SA_m2', 'basal_area_m2')]
mound_SA <- mound_SA[!is.na(mound_SA$SA_m2),]
mound_avg_flux <- merge(mound_avg_flux, mound_SA, by = "sample" )
View(mound_avg_flux)
# create working df for coarse mound averages
mound_avg_flux <- all_fluxes_resample %>% group_by(ID_mound, sample, species_s) %>%
summarise(mean_mound_fluxCH4=mean(flux.CH4),
mean_mound_fluxCO2=mean(flux.CO2_umol),
mean_mound_fluxCH4_CO2=mean(CH4_CO2))
View(mound_avg_flux)
mound_avg_flux <- merge(mound_avg_flux, mound_SA, by = "sample" )
# calculate mound-level flux
mound_avg_flux$mound_CH4flux <- mound_avg_flux$mean_mound_fluxCH4 * mound_avg_flux$SA_m2
mound_avg_flux$mound_CO2flux <- mound_avg_flux$mean_mound_fluxCO2 * mound_avg_flux$SA_m2
ggplot(data = mound_avg_flux, aes(x = basal_area_m2, y = mean_mound_fluxCH4)) +
geom_point()+
geom_smooth(method = 'lm')+
scale_color_brewer("Blues")+
facet_wrap(~species_s, scales = "free_x")+
theme_classic()+
ylab("Total mound CH4 flux (umol/d/mound)") +
xlab("Mound basal area (m2)")
ggplot(data = mound_avg_flux, aes(x = basal_area_m2, y = mean_mound_fluxCO2)) +
geom_point()+
geom_smooth(method = 'lm')+
scale_color_brewer("Blues")+
facet_wrap(~species_s, scales = "free_x")+
theme_classic()+
ylab("Total mound CO2 flux (mmol/d/mound)") +
xlab("Mound basal area (m2)")
# preliminary models
mod <- lm(mean_mound_fluxCO2 ~ basal_area_m2, data = mound_avg_flux)
summary(mod)
# preliminary models
mod <- lm(mean_mound_fluxCO2 ~ basal_area_m2 + species_s, data = mound_avg_flux)
summary(mod)
check_model(mod)
# preliminary models
mod <- lm(mean_mound_fluxCO2 ~ SA_m2 + species_s, data = mound_avg_flux)
summary(mod)
check_model(mod)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
# preliminary models
mod <- lm(mean_mound_fluxCH4 ~ SA_m2 + species_s, data = mound_avg_flux)
summary(mod)
check_model(mod)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
# preliminary models
mod <- lm(mean_mound_fluxCH4 ~ basal_area_m2 + species_s, data = mound_avg_flux)
summary(mod)
check_model(mod)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
ggpredict(mod, terms = c("basal_area_m2", "species_s")) %>% plot(add.data = TRUE)
# preliminary models
mod <- lm(mean_mound_fluxCH4 ~ SA_m2 + species_s, data = mound_avg_flux)
summary(mod)
# reorder levels of campaigns
all_fluxes_resample$campaign <- factor(all_fluxes_resample$campaign, levels = c("may22", "aug23", "nov22"))
# overall CH4 flux by campaign
ggplot(data = all_fluxes_resample, aes(x = campaign, y = flux.CH4, fill = species_s)) +
geom_boxplot()+
theme_classic()+
ylim(0,26000)+ # removes big outlier
ylab("CH4 flux umol/d/m2")+
xlab("")
ggplot(data = all_fluxes_resample, aes(x = species_s, y = flux.CH4, fill = campaign)) +
geom_boxplot()+
theme_classic()+
ylim(0,26000)+ # removes big outlier
ylab("CH4 flux umol/d/m2")+
scale_x_discrete(limits = c("N. magnus", "A. laurensis", "C. acinaciformis"))+
xlab("")+
facet_wrap(~species_s, scales = "free")
ggplot(data = all_fluxes_resample, aes(x = species_s, y = flux.CH4, fill = campaign)) +
geom_boxplot()+
theme_classic()+
ylim(0,26000)+ # removes big outlier
ylab("CH4 flux umol/d/m2")+
scale_x_discrete(limits = c("N. magnus", "A. laurensis", "C. acinaciformis"))+
xlab("")
ggplot(data = all_fluxes_resample, aes(x = species_s, y = flux.CO2, fill = campaign)) +
geom_boxplot()+
theme_classic()+
ylab("CO2 flux mmol/d/m2")+
scale_x_discrete(limits = c("N. magnus", "A. laurensis", "C. acinaciformis"))+
xlab("")
ggplot(data = all_fluxes_resample, aes(x = species_s, y = CH4_CO2, fill = campaign)) +
geom_boxplot()+
theme_classic()+
ylim(0,0.07)+
ylab("CH4:CO2")+
scale_x_discrete(limits = c("N. magnus", "A. laurensis", "C. acinaciformis"))+
xlab("")
ggplot(data = all_fluxes[all_fluxes$species_s == "A. laurensis",], aes(x = species_s, y = flux.CH4, fill = campaign)) +
geom_boxplot()+
theme_classic()+
ylim(0, 8000)+ # removes big outlier
ylab("CH4 flux umol/d/m2")+
scale_x_discrete(limits = c("A. laurensis"))+
xlab("")
ggplot(all_fluxes_resample, aes(x = avg_respT, y = flux.CH4))+
geom_point()+
facet_wrap(~species_s)+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Average Mound Surface Temperature (C)")+
ylim(0,26000)+
theme_classic()
ggplot(sp_all_fluxes, aes(x = avg_respT, y = flux.CO2))+
geom_point()+
facet_wrap(~species_s)+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Average Mound Surface Temperature (C)")+
ylim(0,5000)+
theme_classic()
ggplot(all_fluxes_resample, aes(x = avg_respT, y = flux.CO2))+
geom_point()+
facet_wrap(~species_s)+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Average Mound Surface Temperature (C)")+
ylim(0,5000)+
theme_classic()
# mound flux and time of day
t <- all_fluxes_resample[all_fluxes_resample$campaign %in% c("nov22", "aug23"),]
t$flux_start <- strptime(t$flux_start, "%H:%M")
tt <- all_fluxes_resample[all_fluxes_resample$campaign %in% c("may22"),]
time_all_fluxes <- rbind(t, tt)
View(time_all_fluxes)
ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CH4, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()+
ylim(0,30000)
ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CO2, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
# temperature throughout the day
ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = avg_respT, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
ylab("Average Mound Surface Temperature (C)")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# preliminary models
mod <- lm(avg_respT ~ as.POSIXct(flux_start), data = time_all_fluxes)
summary(mod)
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
t3 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CH4, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()+
ylim(0,30000)
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
t4 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CO2, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
mod1 <- lm(flux.CO2 ~ as.POSIXct(flux_start), data = time_all_fluxes)
summary(mod1)
mod1 <- lm(flux.CH4 ~ as.POSIXct(flux_start), data = time_all_fluxes)
summary(mod1)
mod1 <- lm(flux.CH4 ~ as.POSIXct(flux_start) + species_s, data = time_all_fluxes)
summary(mod1)
ggpredict(mod1, terms = c("flux_start", "species_s")) %>% plot(add.data = TRUE)
ggarrange(t1, t2, ncol = 1)
t1 <- ggplot(all_fluxes_resample, aes(x = avg_respT, y = flux.CH4))+
geom_point()+
facet_wrap(~species_s)+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Average Mound Surface Temperature (C)")+
ylim(0,26000)+
theme_classic()
t2 <- ggplot(all_fluxes_resample, aes(x = avg_respT, y = flux.CO2))+
geom_point()+
facet_wrap(~species_s)+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Average Mound Surface Temperature (C)")+
ylim(0,5000)+
theme_classic()
ggarrange(t1, t2, ncol = 1)
mod1 <- lm(flux.CO2 ~ as.POSIXct(flux_start) + species_s, data = time_all_fluxes)
summary(mod1)
mod2 <- lm(flux.CH4 ~ as.POSIXct(flux_start) + species_s, data = time_all_fluxes)
summary(mod2)
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
t4 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CO2, color = avg_respT))+
geom_point()+
facet_wrap(~species, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()
t3 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CH4, color = avg_respT))+
geom_point()+
facet_wrap(~species, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()+
ylim(0,30000)
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
mod2 <- lm(flux.CH4 ~ as.POSIXct(flux_start) + species_s, data = time_all_fluxes)
t3 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CH4, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CH4 flux umol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()+
ylim(0,30000)
t4 <- ggplot(time_all_fluxes, aes(x = as.POSIXct(flux_start), y = flux.CO2, color = avg_respT))+
geom_point()+
facet_wrap(~campaign, scales = "free_x")+
geom_smooth(method = 'lm', se = FALSE, color = "red")+
ylab("CO2 flux mmol/d/m2")+
xlab("Time of day")+
scale_color_viridis(option="magma")+
theme_classic()
#ylim(0,30000)
ggarrange(t3, t4, ncol = 1, common.legend = TRUE)
mod3 <- lm(flux.CO2 ~ avg_respT + species_s, data = time_all_fluxes)
summary(mod3)
mod4 <- lm(flux.CH4 ~ avg_respT + species_s, data = time_all_fluxes)
summary(mod4)
ggpredict(mod3, terms = c("avg_respT", "species_s")) %>% plot(add.data = TRUE)
summary(mod3)
summary(mod4)
check_model(mod4)
ggpredict(mod4, terms = c("avg_respT", "species_s")) %>% plot(add.data = TRUE)
mod4 <- lm(flux.CH4 ~ avg_respT + species_s + campaign, data = time_all_fluxes)
summary(mod4)
ggpredict(mod4, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)
mod3 <- lm(flux.CO2 ~ avg_respT + species_s + campaign, data = time_all_fluxes)
summary(mod3)
ggpredict(mod3, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)
mod1 <- lm(flux.CO2 ~ as.POSIXct(flux_start) + species_s + campaign, data = time_all_fluxes)
summary(mod1)
mod2 <- lm(flux.CH4 ~ as.POSIXct(flux_start) + species_s + campaign, data = time_all_fluxes)
summary(mod2)
ggpredict(mod1, terms = c("species_s", "campaign")) %>% plot(add.data = TRUE)
summary(mod1)
mod2 <- lm(flux.CH4 ~ as.POSIXct(flux_start) + species_s + campaign, data = time_all_fluxes)
summary(mod2)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
ggpredict(mod3, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)
ggpredict(mod4, terms = c("avg_respT", "species_s", "campaign")) %>% plot(add.data = TRUE)

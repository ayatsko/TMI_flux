depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
# read in drill metadata (including dbh at drill point)
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
# use THIS (below) when not running locally, change directory:
# dat <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces/residrill_OKtraces.csv")
# create depth of residrill path column
depth_IR <- sapply(resi_dat_IR, function(x) tail(x$depth_mm,1)/100,USE.NAMES = TRUE,simplify = FALSE)
names(depth_IR) <- names(rgp_in_IR)
# calculate depth that residrill went to for each trace
depth_v_IR <- t(do.call(cbind.data.frame, depth_IR))
id_IR <- rownames(depth_v_IR)
depth_df_IR <- tibble(id_IR, depth_v_IR)
# remove filepath from id_IR
# string is: /Users/abbeyyatsko/Desktop/resi_working/
depth_df_IR$id_IR <- gsub("[/Users/abbeyyatsko/Desktop/resi_working/]", "", depth_df_IR$id_IR)
depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
depth_df_IR <- as.data.frame(lapply(depth_df_IR, unlist))
depth_df_IR$id_IR <- as.factor(depth_df_IR$id_IR)
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id"))
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id_IR"))
View(d2)
# read in residrill files (.rgp format)
files_IR <- list.files("/Users/abbeyyatsko/Desktop/resi_working",full.names = TRUE, pattern = "rgp",recursive = TRUE)
# use THIS (below) when not running locally, change directory:
# files <- list.files("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces",full.names = TRUE, pattern = "rgp",recursive = TRUE)
rgp_in_IR <- sapply(files_IR, readLines, USE.NAMES= TRUE, simplify = FALSE) # changed from read_lines to readLines as it wasn't originally running
# make residrill files into data frames using read_resi function
resi_dat_IR <- sapply(seq_along(rgp_in_IR), function(x) read_resi(rgp_in_IR[[x]]), USE.NAMES= TRUE, simplify = FALSE)
names(resi_dat_IR) <- names(rgp_in_IR)
resi_dat_l_IR <- bind_rows(resi_dat_IR)
resi_dat_l_IR$number<- as.numeric(resi_dat_l_IR$number)
# read in drill metadata (including dbh at drill point)
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
# create depth of residrill path column
depth_IR <- sapply(resi_dat_IR, function(x) tail(x$depth_mm,1)/100,USE.NAMES = TRUE,simplify = FALSE)
names(depth_IR) <- names(rgp_in_IR)
# calculate depth that residrill went to for each trace
depth_v_IR <- t(do.call(cbind.data.frame, depth_IR))
id_IR <- rownames(depth_v_IR)
depth_df_IR <- tibble(id_IR, depth_v_IR)
# remove filepath from id_IR
# string is: /Users/abbeyyatsko/Desktop/resi_working/
depth_df_IR$id_IR <- gsub("[/Users/abbeyyatsko/Desktop/resi_working/]", "", depth_df_IR$id_IR)
depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
depth_df_IR <- as.data.frame(lapply(depth_df_IR, unlist))
depth_df_IR$id_IR <- as.factor(depth_df_IR$id_IR)
View(dat_IR)
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id_IR"))
View(d2)
files_IR <- list.files("/Users/abbeyyatsko/Desktop/resi_working",full.names = TRUE, pattern = "rgp",recursive = TRUE)
# use THIS (below) when not running locally, change directory:
# files <- list.files("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces",full.names = TRUE, pattern = "rgp",recursive = TRUE)
rgp_in_IR <- sapply(files_IR, readLines, USE.NAMES= TRUE, simplify = FALSE) # changed from read_lines to readLines as it wasn't originally running
# make residrill files into data frames using read_resi function
resi_dat_IR <- sapply(seq_along(rgp_in_IR), function(x) read_resi(rgp_in_IR[[x]]), USE.NAMES= TRUE, simplify = FALSE)
names(resi_dat_IR) <- names(rgp_in_IR)
resi_dat_l_IR <- bind_rows(resi_dat_IR)
resi_dat_l_IR$number<- as.numeric(resi_dat_l_IR$number)
# read in drill metadata (including dbh at drill point)
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
# use THIS (below) when not running locally, change directory:
# dat <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces/residrill_OKtraces.csv")
# create depth of residrill path column
depth_IR <- sapply(resi_dat_IR, function(x) tail(x$depth_mm,1)/100,USE.NAMES = TRUE,simplify = FALSE)
names(depth_IR) <- names(rgp_in_IR)
# calculate depth that residrill went to for each trace
depth_v_IR <- t(do.call(cbind.data.frame, depth_IR))
id_IR <- rownames(depth_v_IR)
depth_df_IR <- tibble(id_IR, depth_v_IR)
# remove filepath from id_IR
# string is: /Users/abbeyyatsko/Desktop/resi_working/
depth_df_IR$id_IR <- gsub("[/Users/abbeyyatsko/Desktop/resi_working/]", "", depth_df_IR$id_IR)
depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
depth_df_IR <- as.data.frame(lapply(depth_df_IR, unlist))
depth_df_IR$id_IR <- as.factor(depth_df_IR$id_IR)
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id_IR"))
files_IR <- list.files("/Users/abbeyyatsko/Desktop/resi_working",full.names = TRUE, pattern = "rgp",recursive = TRUE)
# use THIS (below) when not running locally, change directory:
# files <- list.files("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces",full.names = TRUE, pattern = "rgp",recursive = TRUE)
rgp_in_IR <- sapply(files_IR, readLines, USE.NAMES= TRUE, simplify = FALSE) # changed from read_lines to readLines as it wasn't originally running
# make residrill files into data frames using read_resi function
resi_dat_IR <- sapply(seq_along(rgp_in_IR), function(x) read_resi(rgp_in_IR[[x]]), USE.NAMES= TRUE, simplify = FALSE)
names(resi_dat_IR) <- names(rgp_in_IR)
resi_dat_l_IR <- bind_rows(resi_dat_IR)
resi_dat_l_IR$number<- as.numeric(resi_dat_l_IR$number)
# read in drill metadata (including dbh at drill point)
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
# use THIS (below) when not running locally, change directory:
# dat <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces/residrill_OKtraces.csv")
# create depth of residrill path column
depth_IR <- sapply(resi_dat_IR, function(x) tail(x$depth_mm,1)/100,USE.NAMES = TRUE,simplify = FALSE)
names(depth_IR) <- names(rgp_in_IR)
# calculate depth that residrill went to for each trace
depth_v_IR <- t(do.call(cbind.data.frame, depth_IR))
id_IR <- rownames(depth_v_IR)
depth_df_IR <- tibble(id_IR, depth_v_IR)
# remove filepath from id_IR
# string is: /Users/abbeyyatsko/Desktop/resi_working/
depth_df_IR$id_IR <- gsub("[/Users/abbeyyatsko/Desktop/resi_working/]", "", depth_df_IR$id_IR)
depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
depth_df_IR <- as.data.frame(lapply(depth_df_IR, unlist))
depth_df_IR$id_IR <- as.factor(depth_df_IR$id_IR)
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id_IR"))
# calculate difference between resi reading depth and dbh
d2$abs_diff <- (d2$drill_dbh_cm-d2$depth_v_IR)
# calculate amount of bark based on Rosell
# https://nph.onlinelibrary.wiley.com/doi/10.1111/nph.13889
d2$bark <-d2$drill_dbh_cm^0.700
# d2 and resi_dat_l have IDs that are slightly different (PNW-01 / PNW01)
# from d2 remove '-' from drill_ID
d2$drill_ID <- gsub('-','',d2$drill_ID)
# join d2 (metadata) and resi_dat_l (raw resi data) by drill ID
p <- left_join(d2, resi_dat_l_IR, by = c("drill_ID"="id_IR"))
View(resi_dat_l_IR)
# join d2 (metadata) and resi_dat_l (raw resi data) by drill ID
p <- left_join(d2, resi_dat_l_IR, by = c("drill_ID"="id"))
View(p)
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v), max_y=max(feed),
sampled_stem = (depth_v*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v_IR*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:11]
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v_IR*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# graphing portion
lapply(seq_along(resi_dat_c), function(x){ggplot(resi_dat_c[[x]], aes(x= depth_mm))+
ylab("Resistance")+
geom_area(aes(y = feed), fill = "black", alpha = 0.5)+
geom_area(aes(y = drill), fill ="green", alpha = 0.5)})
dev.off()
View(p)
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[4:7]
files_IR <- list.files("/Users/abbeyyatsko/Desktop/resi_working",full.names = TRUE, pattern = "rgp",recursive = TRUE)
# use THIS (below) when not running locally, change directory:
# files <- list.files("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces",full.names = TRUE, pattern = "rgp",recursive = TRUE)
rgp_in_IR <- sapply(files_IR, readLines, USE.NAMES= TRUE, simplify = FALSE) # changed from read_lines to readLines as it wasn't originally running
# make residrill files into data frames using read_resi function
resi_dat_IR <- sapply(seq_along(rgp_in_IR), function(x) read_resi(rgp_in_IR[[x]]), USE.NAMES= TRUE, simplify = FALSE)
names(resi_dat_IR) <- names(rgp_in_IR)
resi_dat_l_IR <- bind_rows(resi_dat_IR)
resi_dat_l_IR$number<- as.numeric(resi_dat_l_IR$number)
# read in drill metadata (including dbh at drill point)
dat_IR <- read.csv("/Users/abbeyyatsko/Desktop/residrill_IR.csv")
# use THIS (below) when not running locally, change directory:
# dat <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/data/residrillOKtraces/residrill_OKtraces.csv")
# create depth of residrill path column
depth_IR <- sapply(resi_dat_IR, function(x) tail(x$depth_mm,1)/100,USE.NAMES = TRUE,simplify = FALSE)
names(depth_IR) <- names(rgp_in_IR)
# calculate depth that residrill went to for each trace
depth_v_IR <- t(do.call(cbind.data.frame, depth_IR))
id_IR <- rownames(depth_v_IR)
depth_df_IR <- tibble(id_IR, depth_v_IR)
# remove filepath from id_IR
# string is: /Users/abbeyyatsko/Desktop/resi_working/
depth_df_IR$id_IR <- gsub("[/Users/abbeyyatsko/Desktop/resi_working/]", "", depth_df_IR$id_IR)
depth_df_IR$id_IR <- gsub("[.]", "", depth_df_IR$id_IR)
# make sure drill IDs are factor variables
str(dat_IR$drill_ID)
dat_IR$drill_ID <- as.factor(dat_IR$drill_ID)
str(depth_df_IR$id_IR)
depth_df_IR <- as.data.frame(lapply(depth_df_IR, unlist))
depth_df_IR$id_IR <- as.factor(depth_df_IR$id_IR)
# join resi path depth with metadata/dbh data
d2 <-left_join(dat_IR,depth_df_IR, by = c("drill_ID"="id_IR"))
# calculate difference between resi reading depth and dbh
d2$abs_diff <- (d2$drill_dbh_cm-d2$depth_v_IR)
# calculate amount of bark based on Rosell
# https://nph.onlinelibrary.wiley.com/doi/10.1111/nph.13889
d2$bark <-d2$drill_dbh_cm^0.700
View(d2)
View(resi_dat_l_IR)
# d2 and resi_dat_l have IDs that are slightly different (PNW-01 / PNW01)
# from d2 remove '-' from drill_ID
d2$drill_ID <- gsub('-','',d2$drill_ID)
# remove U's (upper notation causing problems)
resi_dat_l_IR$id <- gsub('U','',resi_dat_l_IR$id)
# join d2 (metadata) and resi_dat_l (raw resi data) by drill ID
p <- left_join(d2, resi_dat_l_IR, by = c("drill_ID"="id"))
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v_IR*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# graphing portion
lapply(seq_along(resi_dat_c), function(x){ggplot(resi_dat_c[[x]], aes(x= depth_mm))+
ylab("Resistance")+
geom_area(aes(y = feed), fill = "black", alpha = 0.5)+
geom_area(aes(y = drill), fill ="green", alpha = 0.5)})
dev.off()
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:11]
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:1]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# graphing portion
lapply(seq_along(resi_dat_c), function(x){ggplot(resi_dat_c[[x]], aes(x= depth_mm))+
ylab("Resistance")+
geom_area(aes(y = feed), fill = "black", alpha = 0.5)+
geom_area(aes(y = drill), fill ="green", alpha = 0.5)})
dev.off()
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[2]
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[2:2]
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v_IR*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:5]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# graphing portion
lapply(seq_along(resi_dat_c), function(x){ggplot(resi_dat_c[[x]], aes(x= depth_mm))+
ylab("Resistance")+
geom_area(aes(y = feed), fill = "black", alpha = 0.5)+
geom_area(aes(y = drill), fill ="green", alpha = 0.5)})
dev.off()
# generate resi_dat_c from resi_dat_l to use in generating trace figures
p %>%
group_by(drill_ID, tree_ID, species) %>%
mutate(max_x = max(depth_v_IR), max_y=max(feed),
sampled_stem = (depth_v_IR*100)/drill_dbh_cm) %>%
ungroup() %>%
group_split(drill_ID, species, drill_dbh_cm) -> resi_dat_c
# subset traces as to not overwhelm R in generating preliminary figures
resi_dat_c <- resi_dat_c[1:11]
# generate pdf where each page is an individual residrill trace
pdf(file = "/Users/abbeyyatsko/Downloads/residrill_IR.pdf", onefile = TRUE)
# graphing portion
lapply(seq_along(resi_dat_c), function(x){ggplot(resi_dat_c[[x]], aes(x= depth_mm))+
ylab("Resistance")+
geom_area(aes(y = feed), fill = "black", alpha = 0.5)+
geom_area(aes(y = drill), fill ="green", alpha = 0.5)})
dev.off()
unique(resi_dat_l_IR$id)
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(ggplot2)
library(ggpubr)
library(dplyr)
library(RColorBrewer)
library(tidyr)
# cookie damage data
cookie <- read.csv("/Users/abbeyyatsko/Downloads/cookie_damage - master (6).csv")
# cookie master master
master <- read.csv("/Users/abbeyyatsko/Downloads/cookies_master - master (2).csv")
# custom palette
nb.cols <- 40
mycolors <- rev(colorRampPalette(brewer.pal(8, "Oranges"))(nb.cols))
# data structure - cookie damage
str(cookie)
cookie$perc_hollow <- (cookie$hollowed_area / cookie$undamaged_area)*100
cookie$perc_rot <- (cookie$rotted_area / cookie$undamaged_area)*100
cookie$field_ID <- as.factor(cookie$field_ID)
cookie$tree_ID <- as.factor(cookie$tree_ID)
# data structure - cookie master
str(master)
master$tree_ID <- paste(master$tree, master$firebreak, sep = "_")
master <- master %>% relocate(tree_ID, .after = field_ID)
master$field_ID <- as.factor(master$field_ID)
master$tree_ID <- as.factor(master$tree_ID)
master$cutpoint <- as.factor(master$cutpoint)
master$species <- as.factor(master$species)
# extract individual tree ID info
cookie$tree <- sub("\\-.*", "", cookie$field_ID)
cookie <- cookie %>% relocate(tree, .after = field_ID)
# extract position info
cookie$position <- sub('.*-', '', cookie$field_ID)
cookie <- cookie %>% relocate(position, .after = tree)
# adding binary columns for damage
cookie$hollowed <- ifelse(cookie$perc_hollow > 0.00, 'y', 'n')
cookie$rotted <- ifelse(cookie$perc_rot > 0.00, 'y', 'n')
cookie$damaged <- ifelse(cookie$hollowed == 'y' | cookie$rotted == 'y', 'y', 'n')
# remove NAs (for samples that cookies have not yet been quantified)
# cookie <- cookie[!is.na(cookie$undamaged_area),]
# working df for just hollowed/rotted pieces
hollowed <- cookie[cookie$perc_hollow > 0.00,]
rotted <- cookie[cookie$perc_rot > 0.00,]
# remove trees with only one point of hollowing damage
measure_number_h <- data.frame(table(hollowed$tree_ID))
measure_number_h <- subset(measure_number_h, Freq>1)
measure_number_h <- as.vector(measure_number_h$Var1)
hollowed_positions <- hollowed[hollowed$tree_ID %in% measure_number_h,]
hollowed_positions$position <- as.factor(hollowed_positions$position)
# remove trees with only one point of rot damage
measure_number_r <- data.frame(table(rotted$tree_ID))
measure_number_r <- subset(measure_number_r, Freq>1)
measure_number_r <- as.vector(measure_number_r$Var1)
rotted_positions <- rotted[rotted$tree_ID %in% measure_number_r,]
rotted_positions$position <- as.factor(rotted_positions$position)
# total damaged (hollowed or rotted)
a <-  ggplot(cookie, aes(x=factor(damaged)))+
geom_bar(aes(y = (..count..)/sum(..count..)), fill="lightgrey") +
scale_y_continuous(labels=scales::percent) +
theme_minimal()
# damage by type - hollowed
b <-  ggplot(cookie, aes(x=factor(hollowed)))+
geom_bar(aes(y = (..count..)/sum(..count..)), fill="grey") +
scale_y_continuous(labels=scales::percent) +
theme_minimal()
# damage by type - rotted
c <-  ggplot(cookie, aes(x=factor(rotted)))+
geom_bar(aes(y = (..count..)/sum(..count..)), fill="darkgrey") +
scale_y_continuous(labels=scales::percent) +
theme_minimal()
ggarrange(a, b, c, ncol = 1)
# extent of damage occurring by hollowing
d <-  ggplot(hollowed, aes(x=tree_ID, y = perc_hollow, fill = species))+
geom_boxplot() +
geom_jitter()+
scale_fill_brewer(palette = "Oranges") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# extent of damage occurring by rotting
e <-  ggplot(rotted, aes(x=tree_ID, y = perc_rot, fill = species))+
geom_boxplot() +
geom_jitter()+
scale_fill_brewer(palette = "Oranges") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggarrange(d, e, ncol = 1, common.legend = TRUE, legend="bottom")
# plot hollowing ascending throughout tree for occurrences of > 1
f <-  ggplot(hollowed_positions, aes(x=position, y = perc_hollow))+
geom_point()+
facet_wrap(~tree_ID)+
scale_x_discrete(limits=c("S", "C", "A", "BR2", "BR3", "BR4"))+
theme_classic()
# plot rot ascending throughout tree for occurrences of > 1
g <-  ggplot(rotted_positions, aes(x=position, y = perc_rot))+
geom_point()+
facet_wrap(~tree_ID)+
scale_x_discrete(limits=c("S", "C", "A", "BR2", "BR3", "BR4"))+
theme_classic()
ggarrange(f, g, ncol = 1)
# plot hollowing throughout tree based on size class
h <-  ggplot(hollowed_positions, aes(x=diameter_cm, y = perc_hollow))+
geom_point()+
geom_line()+
facet_wrap(~tree_ID)+
scale_x_reverse()+
theme_classic()
# plot rot throughout tree based on size class
i <-  ggplot(rotted_positions, aes(x=diameter_cm, y = perc_rot))+
geom_point()+
geom_line()+
facet_wrap(~tree_ID)+
scale_x_reverse()+
theme_classic()
# hollow damage by species
j <-  ggplot(hollowed_positions, aes(x=diameter_cm, y = perc_hollow, color = tree_ID))+
geom_point()+
geom_line()+
scale_color_manual(values = mycolors) +
facet_wrap(~species)+
scale_x_reverse()+
theme_classic()
# rot damage by species
k <-  ggplot(rotted_positions, aes(x=diameter_cm, y = perc_rot, color = tree_ID))+
geom_point()+
geom_line()+
scale_color_brewer(palette = "RdGy")+
facet_wrap(~species)+
scale_x_reverse()+
theme_classic()
# hollow damage at different points of tree by species
l <- ggplot(cookie, aes(x = position, y = perc_hollow, color = species))+
geom_boxplot()+
scale_x_discrete(limits=c("S", "A", "C", "BR2", "BR3", "BR4"))+
scale_color_brewer(palette = "RdGy")+
theme_classic()
# rot damage at different points of tree by species
m <- ggplot(cookie, aes(x = position, y = perc_rot, color = species))+
geom_boxplot()+
scale_x_discrete(limits=c("S", "A", "C", "BR2", "BR3", "BR4"))+
scale_color_brewer(palette = "RdGy")+
theme_classic()
# hollowing averages for individual tree stems
cookie %>%
group_by(tree_ID) %>%
summarize(min = min(perc_hollow),
q1 = quantile(perc_hollow, 0.25),
median = median(perc_hollow),
mean = mean(perc_hollow),
q3 = quantile(perc_hollow, 0.75),
max = max(perc_hollow)) -> hollow_summary
# rot averages for individual tree stems
cookie %>%
group_by(tree_ID) %>%
summarize(min = min(perc_rot),
q1 = quantile(perc_rot, 0.25),
median = median(perc_rot),
mean = mean(perc_rot),
q3 = quantile(perc_rot, 0.75),
max = max(perc_rot)) -> rot_summary
# pull out scarf diameter (use this as a proxy for dbh)
# filter out all S from cookie
s <- cookie[cookie$position=="S" ,]
# new column diam_s
s$diam_s <- s$diameter_cm
s <- s[c("tree_ID", "diam_s", "species")]
# rename tree_ID in cookie
x <- merge(hollow_summary, s, by = "tree_ID")
# add in diameter information for rest of cookies
diameter <- cookie[c("field_ID", "diameter_cm")]
z <- full_join(diameter, master, by = "field_ID", "diameter_cm")
# remove C cookies
z %>% drop_na(tree_ID) -> z
# calculate terminal branch average diameters
z %>%
mutate(diameter_cm = ifelse(is.na(diameter_cm), (diam_1+diam_2)/2, diameter_cm)) -> z
# clean up NAs (EXTRA3-BR2 does not have a photo associated, therefore no diameter)
z %>% drop_na(diameter_cm) -> z
# remove trees that only have one observation for wood density
measure_number_wd <- data.frame(table(z$tree_ID))
measure_number_wd <- subset(measure_number_wd, Freq>1)
measure_number_wd <- as.vector(measure_number_wd$Var1)
z_follow <- z[z$tree_ID %in% measure_number_wd,]
View(z_follow)
head(z_follow)
# plot wood density changes by
ggplot(z_follow, aes(x=diameter_cm, y = density_fresh_disp_gcm3, color = tree_ID))+
geom_point()+
geom_smooth(method = "lm", se=F)+
facet_wrap(~species)+
scale_color_manual(values = mycolors) +
scale_x_reverse()+
ylim(0, 1.3)+
theme_classic()+
theme(legend.position = "none")
sp <- read.csv("/Users/abbeyyatsko/Downloads/species.csv")
unique(sp$species)

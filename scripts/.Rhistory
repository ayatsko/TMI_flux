A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb$mp_damaged_prop <- frustrum_agb$mp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum_agb, cols = sp_damaged_kg:mp_damaged_kg)
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
t
frustrum_agb_long %>% group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) -> df
ggplot(df, aes(x = name, y = mean, fill = name))+
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.07)+
theme_classic()+
ylab("AGB in frustrum (kg)")+
xlab("")+
theme(legend.position="none")
View(frustrum_agb_long)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
# model
mod_test <- lm(mp_damaged_kg ~ dbh_cm, data = frustrum)
summary(mod_test)
check_model(mod_test)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
# density model
mod_test <- lm(mp_damaged_kg ~ wd, data = frustrum)
summary(mod_test)
check_model(mod_test)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
ggpredict(mod_test, terms = c("wd"))  %>% plot(add.data = TRUE)
agb <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/R/resi_heights/data/site_agb.csv")
View(agb)
unique(agb$site)
pnw <- agb[agb$site == "pnw",]
stck <- agb[agb$site == "station_creek",]
View(stck)
View(pnw)
n(pnw$species == "Eucalyptus cullenii")
n(pnw$species == "Eucalyptus cullenii")
sum(pnw$species == "Eucalyptus cullenii")
sum(pnw$species_matched == "Eucalyptus cullenii")
unique(pnw$species_matched)
sum(pnw$species_matched == "Eucalyptus cullenii")
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE)
# pnw stem abundance and biomass of each species
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE)/ length(pnw)
length(pnw)
width(pnw)
nrow(pnw)
# pnw stem abundance and biomass of each species
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE) / nrow(pnw)
sum(pnw$species_matched == "Melaleuca stenostachya",na.rm = TRUE) / nrow(pnw)
sum(pnw$species_matched == "Melaleuca stenostachya", na.rm = TRUE)
# pnw biomass of each species
sum(pnw$agb[pnw$species_matched == "Eucalyptus cullenii", na.rm = TRUE])
pnw$species_matched == "Eucalyptus cullenii"
sum(pnw$agb[pnw$species_matched == "Eucalyptus cullenii"], na.rm = TRUE)
sum(pnw$agb[pnw$species_matched == "Melaleuca stenostachya"], na.rm = TRUE)
# PENNYWEIGHT
# Pennyweight redone (subsection of pennyweight)
pnw <- read_excel("/Users/abbeyyatsko/Downloads/pnw_totalbiomass_redone.xlsx",sheet = 1,trim_ws = TRUE)
library(readxl)
# PENNYWEIGHT
# Pennyweight redone (subsection of pennyweight)
pnw <- read_excel("/Users/abbeyyatsko/Downloads/pnw_totalbiomass_redone.xlsx",sheet = 1,trim_ws = TRUE)
### PREVIOUSLY RESIDRILLED
# read in file that shows what has been residrilled as part of the stem damage paper
trees_measured <- read.csv("/Users/abbeyyatsko/Downloads/stem_damage.csv")
View(trees_measured)
### OVERALL SITE LIVE BIOMASS
# read in file that is all of the biomass at STATION CREEK (from live biomass survey)
livebiomass_stck <- read.csv("/Users/abbeyyatsko/Downloads/wtf_livebiomass - Station Creek.csv")
#sort by species
#sort by species please
all_fluxes_resample_reps_avg$species_s <- factor(all_fluxes_resample_reps_avg$species_s, levels = c("A. laurensis", "C. acinaciformis", "N. magnus"))
# Q3
all_fluxes_resample_reps_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_resample_reps_avg.csv")
#sort by species please
all_fluxes_resample_reps_avg$species_s <- factor(all_fluxes_resample_reps_avg$species_s, levels = c("A. laurensis", "C. acinaciformis", "N. magnus"))
all_fluxes_resample_reps_avg$species_s
# tell how many species there are
# tell how many species there are
length(unique(all_fluxes_resample_reps_avg$species_s))
R.version.string
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plyr)
library(ggpubr)
library(patchwork)
all_fluxes_NT <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_NT.csv")
p_fluxes_f <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/p_fluxes_f.csv")
all_fluxes_mound_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound_avg.csv")
all_fluxes_mound <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
all_fluxes_seasonal_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_resample_reps_avg.csv")
# supplement (?)
all_fluxes_daily <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_daily_fluxes.csv")
# a) INDIVIDUAL TERMITES
# TEF
ggplot(all_fluxes_NT, aes(x = species, y = TEF_ug_g_h, fill = species))+
geom_boxplot(outlier.shape = NA)+
geom_jitter()+
ylab("Termite EF (ug CH4/hr/g termite)")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
ch4 <- ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CH4 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
co2 <- ggplot(df_long[df_long$flux == "CO2",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CO2 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
fig2 <- ch4 + co2 + plot_layout(guides = 'collect')
fig2
ch4 + co2 + plot_layout(guides = 'collect')
ch4 <- ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CH4 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
library(dplyr)
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
library(tidyr))
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
library(tidyr)
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
ch4 <- ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CH4 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
co2 <- ggplot(df_long[df_long$flux == "CO2",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CO2 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
fig2 <- ch4 + co2 + plot_layout(guides = 'collect')
fig2
co2
ch4
ch4 + co2 + plot_layout(guides = 'collect')
fig2 <- ch4 + co2
fig2
# a) INDIVIDUAL TERMITES
# TEF
ggplot(all_fluxes_NT, aes(x = species, y = TEF_ug_g_h, fill = species))+
geom_boxplot(outlier.shape = NA)+
geom_jitter()+
ylab("Termite EF (ug CH4/hr/g termite)")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
ch4 <- ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CH4 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
co2 <- ggplot(df_long[df_long$flux == "CO2",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CO2 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
fig2 <- ch4 + co2 + plot_layout(guides = 'collect')
# test what the ratio of termite:mound mass is - best if consistent across the df (seems to be largely true)
p_fluxes_f$termite_mound_ratio <- p_fluxes_f$mass_termite_g / p_fluxes_f$mass_mound_material_g
ggplot(p_fluxes_f, aes(x = species, y = termite_mound_ratio, fill = species))+
geom_boxplot()+
ylab("Termite mass:Mound mass")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# b) TERMITE MOUNDS
ggplot(all_fluxes_mound_avg, aes(x = species_s, y = mean_mound_fluxCH4, fill = species_s)) +
geom_boxplot()+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
theme_classic()+
ylab("CH4 flux umol/d/m2")+
xlab("")+
scale_fill_brewer(palette = "Dark2")+
theme(legend.position = "none")
# test tests
# a) one way anova
aov1 <- aov(TEF_ug_g_h ~ species, data = all_fluxes_NT)
summary(aov1) # decent model, assumption checks are good
TukeyHSD(aov1) # all species are significantly different
# b) one way anova (unequal sample sizes)
aov2 <- aov(mean_mound_fluxCH4 ~ species_s, data = all_fluxes_mound_avg)
summary(aov2) # normality and HoV dont look great
kruskal.test(mean_mound_fluxCH4 ~ species_s, data = all_fluxes_mound_avg)
dunn.test(all_fluxes_mound_avg$mean_mound_fluxCH4, all_fluxes_mound_avg$species_s, method = "bonferroni") # N. magnus different to laurensis, acinaciformis
fig2
ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()
ggplot(df_long[df_long$flux == "CO2",], aes(x = species, y = prop, fill = material))+
geom_boxplot()
ch4
co2
# test what the ratio of termite:mound mass is - best if consistent across the df (seems to be largely true)
p_fluxes_f$termite_mound_ratio <- p_fluxes_f$mass_termite_g / p_fluxes_f$mass_mound_material_g
ggplot(p_fluxes_f, aes(x = species, y = termite_mound_ratio, fill = species))+
geom_boxplot()+
ylab("Termite mass:Mound mass")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# b) TERMITE MOUNDS
ggplot(all_fluxes_mound_avg, aes(x = species_s, y = mean_mound_fluxCH4, fill = species_s)) +
geom_boxplot()+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
theme_classic()+
ylab("CH4 flux umol/d/m2")+
xlab("")+
scale_fill_brewer(palette = "Dark2")+
theme(legend.position = "none")
# a) MOUND SIZE
# reorder levels of campaigns
all_fluxes_mound_avg$campaign <- factor(all_fluxes_mound_avg$campaign, levels = c("may22", "aug23", "nov22", "feb24"))
# methane flux (whole mound) by mound size
ggplot(all_fluxes_mound_avg, aes(x = SA_m2, y = mound_CH4flux, color = species_s)) + # swap out basal_area_m2, color = campaign
geom_point()+
geom_smooth(method = 'lm')+
facet_wrap(~species_s, scales = "free")+
scale_color_brewer(palette = "Dark2")+
theme_classic()+
ylab("Total mound CH4 flux (umol/d/mound)") +
xlab("Mound surface area (m2)")+
theme(legend.position = "none")
View(all_fluxes_mound_avg)
# methane flux (whole mound) by mound size
ggplot(all_fluxes_mound_avg, aes(x = SA_m2, y = basal_area_m2, color = species_s)) + # swap out basal_area_m2, color = campaign
geom_point()+
geom_smooth(method = 'lm')+
facet_wrap(~species_s, scales = "free")+
scale_color_brewer(palette = "Dark2")+
theme_classic()+
ylab("Total mound CH4 flux (umol/d/mound)") +
xlab("Mound surface area (m2)")+
theme(legend.position = "none")
# average mound size by species
ggplot(all_fluxes_mound_avg, aes(x = species_s, y = SA_m2, fill = species_s))+ # swap out basal_area_m2
geom_boxplot()+
theme_classic()+
xlab("")+
ylab("Mound surface area (m2)")+
scale_fill_brewer(palette = "Dark2")+
theme(legend.position = "none")
# methane flux (whole mound) by mound size
ggplot(all_fluxes_mound_avg, aes(x = basal_area_m2, y = mound_CH4flux, color = species_s)) + # swap out basal_area_m2, color = campaign
geom_point()+
geom_smooth(method = 'lm')+
facet_wrap(~species_s, scales = "free")+
scale_color_brewer(palette = "Dark2")+
theme_classic()+
ylab("Total mound CH4 flux (umol/d/mound)") +
xlab("Mound surface area (m2)")+
theme(legend.position = "none")
mod -> lm(mound_CH4flux ~ SA_m2, data = all_fluxes_mound_avg)
summary(mod)
mod -> lm(mound_CH4flux ~ SA_m2, data = all_fluxes_mound_avg)
mod <- lm(mound_CH4flux ~ SA_m2, data = all_fluxes_mound_avg)
mod <- lm(mound_CH4flux ~ SA_m2, data = all_fluxes_mound_avg)
summary(mod)
mod <- lm(mound_CH4flux ~ SA_m2 + species_s, data = all_fluxes_mound_avg)
summary(mod)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
library(easystats)
library(ggeffects)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
check_model(mod)
ggpredict(mod, terms = c("SA_m2", "species_s")) %>% plot(add.data = TRUE)
check_model(mod)
check_model(mod)
check_model(mod)
check_model(mod)
theme_set(theme_classic(base_size = 6))
check_model(mod)
dev.off()
check_model(mod)
check_model(mod)
check_model(mod)
check_model(mod)
library(ggplot2)
theme_set(theme_classic(base_size = 6))
check_model(mod)
check_model(mod)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plyr)
library(ggpubr)
#library(patchwork)
library(tidyr)
library(easystats)
library(ggeffects)
all_fluxes_NT <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_NT.csv")
p_fluxes_f <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/p_fluxes_f.csv")
all_fluxes_mound_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound_avg.csv")
all_fluxes_mound <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
all_fluxes_seasonal_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_resample_reps_avg.csv")
# supplement (?)
all_fluxes_daily <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_daily_fluxes.csv")
# a) INDIVIDUAL TERMITES
# TEF
ggplot(all_fluxes_NT, aes(x = species, y = TEF_ug_g_h, fill = species))+
geom_boxplot(outlier.shape = NA)+
geom_jitter()+
ylab("Termite EF (ug CH4/hr/g termite)")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# PROPORTIONAL FLUXES
df <- p_fluxes_f[c("species", "prop_T_CH4", "prop_M_CH4", "prop_T_CO2", "prop_M_CO2")]
df_long <- df %>%
pivot_longer(cols = starts_with("prop_"),
names_to = c(".value", "flux"),
names_pattern = "prop_(.*)_(.*)") %>%
pivot_longer(cols = c(T, M),
names_to = "material",
values_to = "prop")
ch4 <- ggplot(df_long[df_long$flux == "CH4",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CH4 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
co2 <- ggplot(df_long[df_long$flux == "CO2",], aes(x = species, y = prop, fill = material))+
geom_boxplot()+
ylab("Proportion CO2 flux")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()
fig2 <- ch4 + co2 + plot_layout(guides = 'collect')
# test what the ratio of termite:mound mass is - best if consistent across the df (seems to be largely true)
p_fluxes_f$termite_mound_ratio <- p_fluxes_f$mass_termite_g / p_fluxes_f$mass_mound_material_g
ggplot(p_fluxes_f, aes(x = species, y = termite_mound_ratio, fill = species))+
geom_boxplot()+
ylab("Termite mass:Mound mass")+
xlab("")+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
scale_fill_brewer(palette = "Dark2")+
theme_classic()+
theme(legend.position = "none")
# b) TERMITE MOUNDS
ggplot(all_fluxes_mound_avg, aes(x = species_s, y = mean_mound_fluxCH4, fill = species_s)) +
geom_boxplot()+
scale_x_discrete(labels = c("A. laurensis", "C. acinaciformis", "N. magnus"))+
theme_classic()+
ylab("CH4 flux umol/d/m2")+
xlab("")+
scale_fill_brewer(palette = "Dark2")+
theme(legend.position = "none")
# test tests
# a) one way anova
aov1 <- aov(TEF_ug_g_h ~ species, data = all_fluxes_NT)
summary(aov1) # decent model, assumption checks are good
TukeyHSD(aov1) # all species are significantly different
# b) one way anova (unequal sample sizes)
aov2 <- aov(mean_mound_fluxCH4 ~ species_s, data = all_fluxes_mound_avg)
summary(aov2) # normality and HoV dont look great
kruskal.test(mean_mound_fluxCH4 ~ species_s, data = all_fluxes_mound_avg)
dunn.test(all_fluxes_mound_avg$mean_mound_fluxCH4, all_fluxes_mound_avg$species_s, method = "bonferroni") # N. magnus different to laurensis, acinaciformis
# a) MOUND SIZE
# reorder levels of campaigns
all_fluxes_mound_avg$campaign <- factor(all_fluxes_mound_avg$campaign, levels = c("may22", "aug23", "nov22", "feb24"))
# methane flux (whole mound) by mound size
ggplot(all_fluxes_mound_avg, aes(x = basal_area_m2, y = mound_CH4flux, color = species_s)) + # swap out basal_area_m2, color = campaign
geom_point()+
geom_smooth(method = 'lm')+
facet_wrap(~species_s, scales = "free")+
scale_color_brewer(palette = "Dark2")+
theme_classic()+
ylab("Total mound CH4 flux (umol/d/mound)") +
xlab("Mound surface area (m2)")+
theme(legend.position = "none")
mod <- lm(mound_CH4flux ~ SA_m2 + species_s, data = all_fluxes_mound_avg)
summary(mod)
check_model(mod)
x <- check_model(mod)
pdf("downloads/viewplot.pdf", width = 8, height = 6)
pdf("/Users/abbeyyatsko/Downloads/viewplot.pdf", width = 8, height = 6)
x <- check_model(mod)
pdf(x, "/Users/abbeyyatsko/Downloads/viewplot.pdf", width = 8, height = 6)
pdf("/Users/abbeyyatsko/Downloads/viewplot.pdf", width = 8, height = 6)
check_model(mod)
dev.off()
pdf("/Users/abbeyyatsko/Downloads/viewplot.pdf", width = 8, height = 6)
check_model(mod)
check_model(mod)
dev.off()
pdf("/Users/abbeyyatsko/Downloads/viewplot.pdf", width = 8, height = 6)
check_model(mod)
dev.off()

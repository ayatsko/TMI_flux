# rename species with scientific names
all_fluxes$species_s <- ifelse(all_fluxes$species == "Ami", "A. laurensis","")
all_fluxes$species_s <- ifelse(all_fluxes$species == "Nasuti", "N. magnus", all_fluxes$species_s)
all_fluxes$species_s <- ifelse(all_fluxes$species == "Copto", "C. acinaciformis", all_fluxes$species_s)
# create unique ID for mounds in different sampling periods
all_fluxes$ID_mound <- paste(all_fluxes$sample, all_fluxes$campaign, sep = "-")
# filter out measurements without species recorded
all_fluxes <- all_fluxes %>%
filter(species_s != "")
# add in precipitation data
# add three columns: precip_1mo, precip_2mo, precip_3mo
all_fluxes$precip_1mo <-  ifelse(all_fluxes$campaign == "may22", precip$may_1mo_sum,
ifelse(all_fluxes$campaign == "aug23", precip$aug_1mo_sum,
ifelse(all_fluxes$campaign == "nov22", precip$nov_1mo_sum,
ifelse(all_fluxes$campaign == "feb24", precip$feb_1mo_sum, NA))))
all_fluxes$precip_2mo <-  ifelse(all_fluxes$campaign == "may22", precip$may_2mo_sum,
ifelse(all_fluxes$campaign == "aug23", precip$aug_2mo_sum,
ifelse(all_fluxes$campaign == "nov22", precip$nov_2mo_sum,
ifelse(all_fluxes$campaign == "feb24", precip$feb_2mo_sum, NA))))
all_fluxes$precip_3mo <- ifelse(all_fluxes$campaign == "may22", precip$may_3mo_sum,
ifelse(all_fluxes$campaign == "aug23", precip$aug_3mo_sum,
ifelse(all_fluxes$campaign == "nov22", precip$nov_3mo_sum,
ifelse(all_fluxes$campaign == "feb24", precip$feb_3mo_sum, NA))))
# EXPORT - all fluxes
# write.csv(all_fluxes, "/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes.csv", row.names = FALSE)
# EXPORT - mound-only fluxes
all_fluxes_mound <- all_fluxes[all_fluxes$flux_source =="m",]
# write.csv(all_fluxes_mound, "/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv", row.names = FALSE)
# EXPORT - soil-only fluxes
all_fluxes_soil <- all_fluxes[all_fluxes$flux_source =="s",]
# write.csv(all_fluxes_soil, "/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_soil.csv", row.names = FALSE)
# reorder levels of campaigns
all_fluxes$campaign <- factor(all_fluxes$campaign, levels = c("may22", "aug23", "nov22", "feb24"))
# summary of how mounds were measured for each campaign
detach(package:plyr)
summary_counts <- all_fluxes %>%
group_by(campaign, species_s) %>%
summarise(unique_samples = n_distinct(sample))
View(summary_counts)
View(precip)
library(ggplot2)
library(lme4)
library(car)
library(easystats)
library(ggeffects)
library(vegan)
library(partR2)
library(patchwork)
# Q1
all_fluxes_mound_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound_avg.csv")
# Q2
all_fluxes_NT <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_NT.csv")
p_fluxes_f <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/p_fluxes_f.csv")
# Q3
all_fluxes_resample_reps_avg <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_resample_reps_avg.csv")
# Q4
# Supplement
all_fluxes_daily <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_daily_fluxes.csv")
all_fluxes_mound <- read.csv("/Users/abbeyyatsko/Desktop/repos/TMI_flux/data/finalfluxes/all_fluxes_mound.csv")
# OVER SEASON
# lmer(flux ~ temp + precip + species + (1|campaign) + (1|individual), data = )
# create model for each species replicated over 4 measurement points
env_mod1 <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + species_s + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg)
Anova(env_mod1)
check_model(env_mod1)
ggpredict(env_mod1, terms = c("temp", "species_s")) %>% plot(add.data = TRUE)
View(all_fluxes_resample_reps_avg)
all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis"])
all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis"],)
all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis"]
all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis",]
# same model but where each species is run separately
ami_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + species_s + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis",])
# same model but where each species is run separately
ami_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis",])
Anova(ami_mod)
check_model(env_mod1)
# same model but where each species is run separately
ami_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_2mo + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "A. laurensis",])
Anova(ami_mod)
# same model but where each species is run separately
ami_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "C. acinaciformis",])
Anova(ami_mod)
# same model but where each species is run separately
ami_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "N. magnus",])
Anova(ami_mod)
check_model(ami_mod)
ggpredict(ami_mod, terms = c("temp")) %>% plot(add.data = TRUE)
# same model but where each species is run separately
sp_mod <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg[all_fluxes_resample_reps_avg$species_s == "N. magnus",])
ggpredict(sp_mod, terms = c("temp")) %>% plot(add.data = TRUE)
AIC(sp_mod)
# OVER SEASON
# lmer(flux ~ temp + precip + species + (1|campaign) + (1|individual), data = )
env_mod1 <- lmer(mean_mound_fluxCH4 ~ temp  + precip_1mo + species_s + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg)
ggpredict(env_mod1, terms = c("temp", "species_s")) %>% plot(add.data = TRUE)
Anova(env_mod1)
AIC(env_mod1)
# take out precip from model and compare AIC?
env_mod2 <- lmer(mean_mound_fluxCH4 ~ temp + species_s + (1|sample) + (1|campaign), data = all_fluxes_resample_reps_avg)
Anova(env_mod2)
AIC(env_mod2) # precip does add something, so keep with env_mod1?
AIC(env_mod1)
AIC(env_mod2) # precip does add something, so keep with env_mod1?
# INTRAMOUND VARIATION OF MOUND FLUX
all_fluxes_mound$tag <- as.factor(all_fluxes_mound$tag)
all_fluxes_mound$position <- ifelse(all_fluxes_mound$position == "top ", "top", all_fluxes_mound$position)
all_fluxes_mound$position <- as.factor(all_fluxes_mound$position)
# Fit linear mixed-effects model (which I think is best?)
mod1 <- lm(flux.CH4 ~ tag + species_s + ID_mound, data = all_fluxes_mound)
Anova(mod1)
check_model(mod1)
ggpredict(mod1, terms = c("tag", "species_s")) %>% plot(add.data = TRUE)
ggpredict(mod1, terms = c("ID_mound", "species_s")) %>% plot(add.data = TRUE)
View(all_fluxes_mound)
# INTRAMOUND VARIATION OF MOUND FLUX
# lmer to partition the total variance within mounds and between mounds
model <- lmer(flux.CH4 ~ (1 | ID_mound), data = all_fluxes_mound)
anova(model)
model
anova(model)
Anova(model)
# INTRAMOUND VARIATION OF MOUND FLUX
# lmer to partition the total variance within mounds and between mounds
model <- lmer(flux.CH4 ~ (1 | ID_mound), data = all_fluxes_mound)
Anova(model)
anova(model)
null_model <- lmer(flux.CH4 ~ 1, data = all_fluxes_mound)
null_model <- lm(flux.CH4 ~ 1, data = all_fluxes_mound)
anova(model, null_model)
null_model <- lmer(flux.CH4 ~ 1 + (1|ID_mound), data = all_fluxes_mound)
anova(model, null_model)
# INTRAMOUND VARIATION OF MOUND FLUX
# lmer to partition the total variance within mounds and between mounds
model <- lmer(flux.CH4 ~ species_s + (1 | ID_mound), data = all_fluxes_mound)
anova(model)
# INTRAMOUND VARIATION OF MOUND FLUX
# lmer to partition the total variance within mounds and between mounds
model <- lmer(flux.CH4 ~ species_s + (1 | ID_mound), data = all_fluxes_mound)
null_model <- lmer(flux.CH4 ~ species_s + 1, data = all_fluxes_mound)
anova(model, null_model)
null_modell <- lmer(flux.CH4 ~ species_s + 1, data = all_fluxes_mound)
anova(model, null_modell)
null_model <- lmer(flux.CH4 ~ 1 + species_s, data = all_fluxes_mound)
# INTRAMOUND VARIATION OF MOUND FLUX
# lmer to partition the total variance within mounds and between mounds
full_model <- lmer(flux.CH4 ~ 1 + (1 | ID_mound), data = all_fluxes_mound)
# Fit the null model without the random effect
null_model <- lm(flux.CH4 ~ 1, data = all_fluxes_mound)
# Perform likelihood ratio test
lrt <- anova(null_model, full_model)
anova(full_model)
# INTRAMOUND VARIATION OF MOUND FLUX
# total variance in methane flux
total_variance <- var(all_fluxes_mound$flux.CH4)
total_variance
# intermound variance
intermound_variance <- with(all_fluxes_mound, tapply(flux.CH4, ID_mound, var))
intermound_variance
# intramound variance
intramound_variance <- mean(sapply(intermound_variance, function(x) x / length(flux.CH4[all_fluxes_mound$ID_mound == names(intermound_variance)])))
# intramound variance
intramound_variance <- all_fluxes_mound %>%
group_by(ID_mound) %>%
summarise(intramound_variance = var(flux.CH4))
# intramound variance
intramound_variance <- all_fluxes_mound %>%
group_by(ID_mound) %>%
summarize(intramound_variance = var(flux.CH4))
library(dplyr)
# intramound variance
intramound_variance <- all_fluxes_mound %>%
group_by(ID_mound) %>%
summarize(intramound_variance = var(flux.CH4))
# Calculate the average intramound variance
average_intramound_variance <- mean(intramound_variance$intramound_variance)
View(intramound_variance)
# Calculate the average intramound variance
average_intramound_variance <- na.omit(mean(intramound_variance$intramound_variance))
average_intramound_variance
# Calculate the average intramound variance
average_intramound_variance <- mean(intramound_variance$intramound_variance, na.rm = TRUE)
# proportion of variance attributed to intramound
proportion_intramound_variance <- average_intramound_variance / total_variance
proportion_intramound_variance
# ANOVA
anova_result <- aov(flux.CH4 ~ factor(ID_mound), data = all_fluxes_mound)
anova_result
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]
p_value
# proportion of variance attributed to intermound
proportion_intramound_variance <- intermound_variance / total_variance
# proportion of variance attributed to intramound
proportion_intramound_variance <- average_intramound_variance / total_variance
# proportion of variance attributed to intermound
proportion_intermound_variance <- intermound_variance / total_variance
proportion_intramound_variance
proportion_intermound_variance
cov <- all_fluxes_mound %>% group_by(ID_mound) %>%
summarize(mean = mean(flux.CH4),
sd = sd(flux.CH4),
cov = sd(flux.CH4) / mean(flux.CH4))*100
# INTRAMOUND VARIATION OF MOUND FLUX
# via CoV for each mound
detach(package:plyr)
cov <- all_fluxes_mound %>% group_by(ID_mound) %>%
summarize(mean = mean(flux.CH4),
sd = sd(flux.CH4),
cov = sd(flux.CH4) / mean(flux.CH4))*100
cov <- all_fluxes_mound %>% group_by(ID_mound) %>%
summarize(mean = mean(flux.CH4),
sd = sd(flux.CH4),
cov = sd(flux.CH4)/mean(flux.CH4)*100)
View(cov)
ggplot(cov, aes(mean)) +
geom_histogram(aes(y=after_stat(density)), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
theme_classic()
ggplot(cov, aes(sd)) +
geom_histogram(aes(y=after_stat(density)), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
theme_classic()
View(all_fluxes_mound)
ggplot(cov, aes(cov)) +
geom_histogram(aes(y=after_stat(density)), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
theme_classic()
min(cov$cov)
View(all_fluxes_resample_reps_avg)
# how many mounds have high COV values?
x <- cov[cov$cov > 100, ] # cov = 100 means that sd = mean
x
# how many mounds have high COV values?
x <- cov[cov$cov > 30, ] # cov = 100 means that sd = mean
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(lme4)
library(easystats)
library(multcompView)
library(ggeffects)
library(nlme)
library(stats)
library(car)
library(ggpmisc)
library(glmmTMB)
library(patchwork)
load("/Users/abbeyyatsko/Desktop/repos/stem_damage/R/resi_heights/tree_level_damage_myrt.RData")
load("/Users/abbeyyatsko/Desktop/repos/stem_damage/R/resi_heights/myrt.RData")
# a. relationship between proportion damage and height in tree
glmmtb <- glmmTMB(linear_mean ~ drill_height_cm + dbh_cm.x + species + (1|tree_site_ID), myrt, family=list(family="beta",link="logit"))
summary(glmmtb)
check_model(glmmtb)
Anova(glmmtb)
prop <- ggpredict(glmmtb, terms = c("drill_height_cm", "dbh_cm.x"))
plot(prop)+
labs(x = "Drill height", y = "Damage", title = "Predicted proportion damage")
a <- ggplot(myrt, aes(x = drill_height_cm, y = linear_mean)) +
geom_jitter() +
theme_classic() +
xlab("Drill height (cm)") +
ylab("Proportion damaged area")
# b. relationship between area damage and height in tree
# define area of slice 1cm thick at each measurement point
myrt$V_xsection_cm3 <- ((myrt$drill_dbh_cm/2)^2)*(pi)*(1)
myrt$V_xsection_cm3_damaged <- myrt$V_xsection_cm3 * myrt$linear_mean
mixed.M1 <- lmer(log(V_xsection_cm3_damaged) ~ drill_height_cm + species + dbh_cm.x + (1|tree_site_ID), REML = F, data = myrt)
summary(mixed.M1)
Anova(mixed.M1)
check_model(mixed.M1)
v <- c(10, 25, 34)
area <- ggpredict(mixed.M1, terms = c("drill_height_cm [all]", "dbh_cm.x [v]"), back.transform = TRUE)  #%>% plot(add.data = TRUE)
low <- "#364B9A"
mid <- '#F99858'
high <- '#A50026'
b <- ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = dbh_cm.x)) +
geom_jitter() +
scale_colour_gradient2(low=low, mid=mid, midpoint = 30 , high=high, name ='DBH') +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='10'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='10'),
inherit.aes=FALSE,  alpha=0.2, fill = low) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='25'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='25'),
inherit.aes=FALSE,  alpha=0.2, fill = mid)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='34'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='34'),
inherit.aes=FALSE,  alpha=0.2, fill = high)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("True damaged area")
a+b + patchwork::plot_annotation(tag_levels = "a")
summary(glmmtb)
Anova(glmmtb)
ggpredict(mixed.M1, terms = c("drill_height_cm [all]", "dbh_cm.x [v]"), back.transform = TRUE)  #%>% plot(add.data = TRUE)
a <- ggplot(myrt, aes(x = drill_height_cm, y = linear_mean, color = species)) +
geom_jitter() +
theme_classic() +
xlab("Drill height (cm)") +
ylab("Proportion damaged area")
a
prop <- ggpredict(glmmtb, terms = c("drill_height_cm", "species", "dbh_cm.x"))
plot(prop)+
labs(x = "Drill height", y = "Damage", title = "Predicted proportion damage")
prop <- ggpredict(glmmtb, terms = c("species"))
plot(prop)+
labs(x = "Drill height", y = "Damage", title = "Predicted proportion damage")
myrt %>% group_by(species) %>%
summarise(mean = mean(linear_mean))
ggplot(myrt, aes(x = species, y = linear_mean, color = species)) +
geom_jitter() +
theme_classic() +
xlab("Drill height (cm)") +
ylab("Proportion damaged area")
ggplot(myrt, aes(x = species, y = linear_mean, color = species)) +
geom_boxplot() +
theme_classic() +
xlab("") +
ylab("Proportion damaged area")
plot(prop)+
labs(x = "Drill height", y = "Damage", title = "Predicted proportion damage")
ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = dbh_cm.x)) +
geom_jitter() +
scale_colour_gradient2(low=low, mid=mid, midpoint = 30 , high=high, name ='DBH') +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='10'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='10'),
inherit.aes=FALSE,  alpha=0.2, fill = low) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='25'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='25'),
inherit.aes=FALSE,  alpha=0.2, fill = mid)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='34'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='34'),
inherit.aes=FALSE,  alpha=0.2, fill = high)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("True damaged area")
ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = dbh_cm.x)) +
geom_jitter() +
facet_wrap(~species) +
scale_colour_gradient2(low=low, mid=mid, midpoint = 30 , high=high, name ='DBH') +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='10'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='10'),
inherit.aes=FALSE,  alpha=0.2, fill = low) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='25'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='25'),
inherit.aes=FALSE,  alpha=0.2, fill = mid)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='34'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='34'),
inherit.aes=FALSE,  alpha=0.2, fill = high)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("True damaged area")
ggplot(myrt, aes(x = drill_height_cm, y = V_xsection_cm3_damaged, color = dbh_cm.x)) +
geom_jitter() +
facet_wrap(~species) +
scale_colour_gradient2(low=low, mid=mid, midpoint = 30 , high=high, name ='DBH') +
geom_line(aes(x=x, y=predicted), data=filter(area, group=='10'),
inherit.aes=FALSE, colour= low) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='10'),
inherit.aes=FALSE,  alpha=0.2, fill = low) +
geom_line(aes(x=x, y=predicted), data=filter(area, group =='25'),
inherit.aes=FALSE, colour= mid) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='25'),
inherit.aes=FALSE,  alpha=0.2, fill = mid)+
geom_line(aes(x=x, y=predicted), data=filter(area, group =='34'),
inherit.aes=FALSE, colour= high) +
geom_ribbon(aes(x=x, ymin=conf.low, ymax=conf.high), data=filter(area, group=='34'),
inherit.aes=FALSE,  alpha=0.2, fill = high)+
theme_classic() +
xlab("Drill height (cm)") +
ylab("Absolute damaged area")
plot(prop)+
labs(x = "Species", y = "Damage", title = "Predicted proportion damage") # need to turn this into a finalized fig...
# panel c with species boxplots
area <- ggpredict(mixed.M1, terms = c("species"))
plot(area)+
labs(x = "Species", y = "Damage", title = "Predicted proportion damage")
plot(area)+
labs(x = "Species", y = "Damage (cm2)", title = "Predicted absoute area damage")
# generate list of all trees
ids <- unique(myrt$tree_site_ID)
# function that calculates undamaged frustrum volume
frus_ud <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_undamage_cm3 = V)
return(output)
}
# function that calculates damaged frustrum volume
frus_d <- function(x){
ID <- unique(x$tree_site_ID)
d1 <- min(x$drill_height_cm)
d4 <- max(x$drill_height_cm)
L <- d4 - d1
A1 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d1]
A4 <- x$V_xsection_cm3_damaged[x$drill_height_cm == d4]
V <- (L/3) * (A1 + sqrt(A1 * A4) + A4)
output <- data.frame(tree_site_ID = ID, frus_damage_cm3 = V)
return(output)
}
# calculate volume of undamaged frustrum for each tree
frus_v <- lapply(ids, function(id) frus_ud(myrt[myrt$tree_site_ID == id, ]))
frus_v_out <- do.call(rbind, frus_v)
# calculate volume of damaged frustrum for each tree
frus_v_d <- lapply(ids, function(id) frus_d(myrt[myrt$tree_site_ID == id, ]))
frus_v_d_out <- do.call(rbind, frus_v_d)
# merge frustrum volume estimates for damaged and undamaged
frustrum <- merge(frus_v_out, frus_v_d_out, by = "tree_site_ID")
# calculate biomass using wood density
info <- tree_level_damage_myrt[, c("tree_site_ID", "species", "wd", "dbh_cm", "site")]
frustrum <- merge(info, frustrum, by = "tree_site_ID")
# MULTIPOINT damage estimate
frustrum$undamaged_kg <- (frustrum$wd * frustrum$frus_undamage_cm3)/1000
frustrum$mp_damaged_kg <- (frustrum$wd * frustrum$frus_damage_cm3)/1000
# SINGLEPOINT damage estimate (from residrill closest to DBH_)
dbh_resi <- myrt[myrt$drill_height_cm > 113 & myrt$drill_height_cm < 136, ]
missing_elements <- ids[!ids %in% dbh_resi$tree_site_ID]
# troubleshoot missing dbh residrill measurements (STCK-1 only 40cm, STCK-10 needs height = 109, STCK-18 repeated 2x)
stck10 <- myrt %>% filter(tree_site_ID == "STCK-10" & drill_height_cm == 109)
dbh_resi <- rbind(dbh_resi, stck10)
dbh_resi <- dbh_resi %>% filter(!(tree_site_ID == "STCK-18" & drill_height_cm == 114))
# merge in linear_mean of dbh measurement for each tree to frustum df
dbh_resi_merge <- dbh_resi[c("tree_site_ID", "linear_mean")]
frustrum_agb <- left_join(dbh_resi_merge, frustrum, by = "tree_site_ID")
frustrum_agb$sp_damaged_kg <- (frustrum_agb$linear_mean * frustrum_agb$undamaged_kg)
# proportion of biomass damaged from single point and multi point estimate
frustrum_agb$sp_damaged_prop <- frustrum_agb$sp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb$mp_damaged_prop <- frustrum_agb$mp_damaged_kg/frustrum_agb$undamaged_kg
frustrum_agb_long <- pivot_longer(frustrum_agb, cols = sp_damaged_kg:mp_damaged_kg)
t <- wilcox.test(frustrum_agb$sp_damaged_kg, frustrum_agb$mp_damaged_kg, paired = TRUE)
t
frustrum_agb_long %>% group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) -> df
ggplot(df, aes(x = name, y = mean, fill = name))+
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.07)+
theme_classic()+
ylab("AGB in frustrum (kg)")+
xlab("")+
theme(legend.position="none")
View(frustrum_agb_long)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
# model
mod_test <- lm(mp_damaged_kg ~ dbh_cm, data = frustrum)
summary(mod_test)
check_model(mod_test)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
# density model
mod_test <- lm(mp_damaged_kg ~ wd, data = frustrum)
summary(mod_test)
check_model(mod_test)
ggpredict(mod_test, terms = c("dbh_cm"))  %>% plot(add.data = TRUE)
ggpredict(mod_test, terms = c("wd"))  %>% plot(add.data = TRUE)
agb <- read.csv("/Users/abbeyyatsko/Desktop/repos/stem_damage/R/resi_heights/data/site_agb.csv")
View(agb)
unique(agb$site)
pnw <- agb[agb$site == "pnw",]
stck <- agb[agb$site == "station_creek",]
View(stck)
View(pnw)
n(pnw$species == "Eucalyptus cullenii")
n(pnw$species == "Eucalyptus cullenii")
sum(pnw$species == "Eucalyptus cullenii")
sum(pnw$species_matched == "Eucalyptus cullenii")
unique(pnw$species_matched)
sum(pnw$species_matched == "Eucalyptus cullenii")
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE)
# pnw stem abundance and biomass of each species
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE)/ length(pnw)
length(pnw)
width(pnw)
nrow(pnw)
# pnw stem abundance and biomass of each species
sum(pnw$species_matched == "Eucalyptus cullenii",na.rm = TRUE) / nrow(pnw)
sum(pnw$species_matched == "Melaleuca stenostachya",na.rm = TRUE) / nrow(pnw)
sum(pnw$species_matched == "Melaleuca stenostachya", na.rm = TRUE)
# pnw biomass of each species
sum(pnw$agb[pnw$species_matched == "Eucalyptus cullenii", na.rm = TRUE])
pnw$species_matched == "Eucalyptus cullenii"
sum(pnw$agb[pnw$species_matched == "Eucalyptus cullenii"], na.rm = TRUE)
sum(pnw$agb[pnw$species_matched == "Melaleuca stenostachya"], na.rm = TRUE)
# PENNYWEIGHT
# Pennyweight redone (subsection of pennyweight)
pnw <- read_excel("/Users/abbeyyatsko/Downloads/pnw_totalbiomass_redone.xlsx",sheet = 1,trim_ws = TRUE)
library(readxl)
# PENNYWEIGHT
# Pennyweight redone (subsection of pennyweight)
pnw <- read_excel("/Users/abbeyyatsko/Downloads/pnw_totalbiomass_redone.xlsx",sheet = 1,trim_ws = TRUE)
### PREVIOUSLY RESIDRILLED
# read in file that shows what has been residrilled as part of the stem damage paper
trees_measured <- read.csv("/Users/abbeyyatsko/Downloads/stem_damage.csv")
View(trees_measured)
### OVERALL SITE LIVE BIOMASS
# read in file that is all of the biomass at STATION CREEK (from live biomass survey)
livebiomass_stck <- read.csv("/Users/abbeyyatsko/Downloads/wtf_livebiomass - Station Creek.csv")

fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
View(fluxes.CO2)
View(temp1)
View(fluxes.CO2)
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
View(temp1)
View(temp2)
View(temp1)
View(temp2)
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
View(temp2)
View(temp1)
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
temp1=subset(data_merge,fDOY_start==3287.4226852)
flux.times
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==3.287423e+03)
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==2.008944e+04)
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==3.287423e+03)
View(temp1)
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==4.247222e-01)
temp1
# Set corresponding row of output table
j=which(flux.times==4.247222e-01 )
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==2922.4244213)
# Set corresponding row of output table
j=which(flux.times==2922.4244213)
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
flux.times
flux.times[10]
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==730.4215)
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==730.4215)
temp1=subset(data_merge,fDOY_start==730.4215)
View(temp1)
j=which(flux.times==730.4215)
temp1=subset(data_merge,fDOY_start=="730.4215")
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==0.4247222)
source('~/Desktop/repos/TMI_flux/scripts/1.extract_fluxes.R', echo=TRUE)
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
str(data_merge)
flux_times[1]
flux.times[1]
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==0.4247222)
?subset
library(data.table)
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==0.4247222)
View(temp2)
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==0.4247222)
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
fluxes.CO2
## Add named columns
# CH4
fluxes.CH4$Time_start=flux.times
fluxes.CH4$flux.CH4=0
fluxes.CH4$R2.CH4=0
## Identify start of fluxes
Time_start <- meta_TMI[,c("fDOY_start","sample")]
flux.times=unique(Time_start$fDOY_start)
View(Time_start)
# Create new dataframes to hold final fluxes
fluxes.CH4=data.frame(matrix(NA,nrow=length(flux.times)))
fluxes.CO2=data.frame(matrix(NA,nrow=length(flux.times)))
## Add named columns
# CH4
fluxes.CH4$Time_start=flux.times
fluxes.CH4$flux.CH4=0
fluxes.CH4$R2.CH4=0
fluxes.CH4$p.CH4=0
# CO2
fluxes.CO2$Time_start=flux.times
fluxes.CO2$flux.CO2=0
fluxes.CO2$R2.CO2=0
fluxes.CO2$p.CO2=0
## Remove initial empty column
fluxes.CO2=fluxes.CO2[,-1]
fluxes.CH4=fluxes.CH4[,-1]
View(fluxes.CO2)
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/data_merge$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
View(temp1)
View(fluxes.CH4)
View(temp1)
View(temp2)
View(data_merge)
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
summary(mod)$r.squared
summary(mod)$coefficients[2,4]
coef(mod)[2]
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
mod
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==2922.4353009)
MD1toMD8 <- data_merge[!(data_merge$sample == "MD1":"MD8")]
MD1toMD8 <- data_merge[!(data_merge$sample == "MD1" | "MD2" | "MD3" |"MD4" |"MD5"|"MD6"| "MD7" |"MD8")]
MD1toMD8 <- data_merge[!(data_merge$sample == "MD1", "MD2")]
# problems are occurring on line 56 of output, corresponds to MD9 from metadata, f0017
# subset data_merge to only run MD1-MD8
MD1toMD8 <- data_merge[data_merge$sample == "MD1", "MD2", ]
# problems are occurring on line 56 of output, corresponds to MD9 from metadata, f0017
# subset data_merge to only run MD1-MD8
MD1toMD8 <- data_merge[data_merge$sample == "MD1", "MD2" ]
MD1toMD8 <- data_merge[data_merge$sample == "MD1"| "MD2" ]
str(data_merge)
MD1toMD8 <- data_merge[data_merge$sample == c("MD1", "MD2", "MD3")]
MD1toMD8 <- subset[data_merge$sample == c("MD1", "MD2", "MD3")]
test <- subset(data_merge, subset = sample %in% c("MD1", "MD2", "MD3"))
View(test)
test <- subset(data_merge, subset = sample %in% c("MD1", "MD2", "MD3", "MD4", "MD5", "MD6", "MD7", "MD8"))
unique(test$sample)
## For each start time
for (i in test) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(test,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/test$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(test,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/test$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
View(fluxes.CH4)
## Identify start of fluxes
Time_start <- meta_TMI[,c("fDOY_start","sample")]
## Identify start of fluxes
Time_start <- meta_TMI[,c("fDOY_start","sample")]
View(meta_TMI)
# Create new dataframes to hold final fluxes
fluxes.CH4=data.frame(matrix(NA,nrow=length(flux.times)))
fluxes.CO2=data.frame(matrix(NA,nrow=length(flux.times)))
## Add named columns
# CH4
fluxes.CH4$Time_start=flux.times
fluxes.CH4$flux.CH4=0
fluxes.CH4$R2.CH4=0
fluxes.CH4$p.CH4=0
# CO2
fluxes.CO2$Time_start=flux.times
fluxes.CO2$flux.CO2=0
fluxes.CO2$R2.CO2=0
fluxes.CO2$p.CO2=0
## Remove initial empty column
fluxes.CO2=fluxes.CO2[,-1]
fluxes.CH4=fluxes.CH4[,-1]
View(fluxes.CH4)
test <- subset(data_merge, subset = sample %in% c("MD1", "MD2", "MD3", "MD4", "MD5", "MD6", "MD7", "MD8"))
## For each start time
for (i in test) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(test,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from umol/day to umol/m2/day
fluxes.CH4$flux.CH4[j]=coef(mod)[2]/test$chamber_SA_m2
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(test,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate, converted from mol/day to mol/m2/day
fluxes.CO2$flux.CO2[j]=coef(mod)[2]/test$chamber_SA_m2
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}

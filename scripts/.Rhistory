meta_TMI$measurement_day_alt <- with(meta_TMI, paste(substr(measurement_day_altyr, 1, 0),
month_alt,
substr(measurement_day_altyr, 1, nchar(measurement_day_altyr)),
sep = ""))
# reposition measurement_day_alt in df
meta_TMI <- meta_TMI %>% relocate(measurement_day_alt, .before = measurement_day_actual)
meta_TMI <- meta_TMI %>% relocate(year_alt, .before = measurement_day_actual)
meta_TMI <- meta_TMI %>% relocate(month_alt, .before = year_alt)
# format measurement_day_alt
as.Date(meta_TMI$measurement_day_alt, '%m/%d/%Y')
## Pull out date and time data
date_time_start <- strptime(paste(meta_TMI$measurement_day_alt,meta_TMI$flux_start),'%m/%d/%Y %H:%M:%S')
## Add 30 seconds to set buffered start time
date_time_start <- date_time_start+30
## Add 1.5 min (90 sec) to determine end time
date_time_end <- date_time_start+90
## Add fDOY columns for start and endtime to dataframe
fDOY_start <- as.numeric(julian(date_time_start,'2002-01-01'))  #Change for year
fDOY_end <- as.numeric(julian(date_time_end,'2002-01-01'))  #Change for year
meta_TMI <- cbind(fDOY_start,fDOY_end,meta_TMI)
# calculate average respiration temperature - add column
meta_TMI$avg_respT <- rowMeans(meta_TMI[ , c(13:16)], na.rm = TRUE)
# change sample to factor level variables
meta_TMI$sample <- as.factor(meta_TMI$sample)
# rename co2 and ch4 columns because naming format including '.' messes up the sql code
data_clean <- data_clean %>%
rename(CH4 = X.CH4._ppm,
CO2 = X.CO2._ppm,
CH4_dry = X.CH4.d_ppm,
CO2_dry = X.CO2.d_ppm)
# complete merge for respiration data and metadata
data_merge <- sqldf("select data_clean.fDOY, data_clean.CO2_dry, data_clean.CH4_dry, meta_TMI.sample, meta_TMI.avg_respT, meta_TMI.flux_source, meta_TMI.position, meta_TMI.tag, meta_TMI.directon,meta_TMI.chamber, meta_TMI.chamber_SA_cm2, meta_TMI.soil_moisture, meta_TMI.fDOY_start
from data_clean LEFT JOIN meta_TMI ON (data_clean.fDOY BETWEEN meta_TMI.fDOY_start AND meta_TMI.fDOY_end)")
# filter out rows that  have no value for 'sample' - this means that no mound was being recorded
data_merge <- data_merge[complete.cases(data_merge[,c("sample")]),]
# check to make sure all of the samples are there
summary(unique(data_merge$sample))
# co2 (xlim=c(0.4247222, 0.4332870) corresponds to only MD1 first file)
par(mfrow=c(2,1),mar=c(4,4,1,1))
with(data_clean,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(0.4247222, 0.4332870)))
with(data_merge,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(0.4247222, 0.4332870)))
# ch4
par(mfrow=c(2,1),mar=c(4,4,1,1))
with(data_clean,plot(fDOY,CH4_dry,ylim=c(1, 10), xlim=c(0.4247222, 0.4332870)))
with(data_merge,plot(fDOY,CH4_dry,ylim=c(1,10), xlim=c(0.4247222, 0.4332870)))
# other random check - MD 30
# co2 (xlim=c(11323.42, 11323.44) corresponds to only MD1 first file)
# par(mfrow=c(2,1),mar=c(4,4,1,1))
# with(data_clean,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(11323.42, 11323.44)))
# with(data_merge,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(11323.42, 11323.44)))
#
# # ch4
# par(mfrow=c(2,1),mar=c(4,4,1,1))
# with(data_clean,plot(fDOY,CH4_dry,ylim=c(1, 10), xlim=c(11323.42, 11323.44)))
# with(data_merge,plot(fDOY,CH4_dry,ylim=c(1,10), xlim=c(11323.42, 11323.44)))
#
# # MD9 - check because later code to do final fluxes  is breaking for this mound (f0017)
# # co2 (xlim=c(3287.4226852, 3287.4313079) corresponds to only MD1 first file)
# par(mfrow=c(2,1),mar=c(4,4,1,1))
# with(data_clean,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(3287.4226852, 3287.4313079)))
# with(data_merge,plot(fDOY,CO2_dry,ylim=c(400,1300), xlim=c(3287.4226852, 3287.4313079)))
#
# # ch4
# par(mfrow=c(2,1),mar=c(4,4,1,1))
# with(data_clean,plot(fDOY,CH4_dry,ylim=c(1, 10), xlim=c(3287.4226852, 3287.4313079)))
# with(data_merge,plot(fDOY,CH4_dry,ylim=c(1,10), xlim=c(3287.4226852, 3287.4313079)))
# use known volume of chamber (in m3) to convert ppm of gas to liters of gas
# need to add chamber volume column
# small
# h = 5.7 cm
# d = 7.8 cm
sm <- pi*((7.8/2)^2)*5.7
# medium
# h = 10.8 cm
# d = 10.3 cm
med <- pi*((10.3/2)^2)*10.8
# large
# h = 16.1 cm
# d = 15.3 cm
lg <- pi*((15.3/2)^2)*16.1
# mini
# v = 119 ml
mini <- 119
volume_cm3 <- c(sm, med, lg, mini)
chamber <- c("sm", "med", "lg", "mini")
chamber_vols <- data.frame(volume_cm3, chamber)
# chamber volumes are in cm3 - convert to m3 for the next step
chamber_vols$volume_m3 <- chamber_vols$volume_cm3*0.000001
data_merge <- merge(data_merge, chamber_vols, by = c("chamber"))
data_merge <- data_merge %>% relocate(chamber, .after = chamber_SA_cm2)
# also convert SA chamber to be in m2 (currently in cm2)
data_merge$chamber_SA_m2 <- data_merge$chamber_SA_cm2 * 0.0001
data_merge <- data_merge %>% relocate(chamber_SA_m2, .after = chamber_SA_cm2)
# CH4
data_merge$CH4_dry_L=
# parts CH4 per million parts air * volume of air in chamber (m3) * 1000 L per m3
(data_merge$CH4_dry/1000000) * data_merge$volume_m3 * 1000
# CO2
data_merge$CO2_dry_L=
# parts CO2 per million parts air * volume of air in chamber (m3) * 1000 L per m3
(data_merge$CO2_dry/1000000) * data_merge$volume_m3 * 1000
# Use ideal gas law to calculate umol of CH4 or mmol of CO2
# CH4
data_merge$CH4_dry_umol=
# (atm pressure * L CH4) / (R in L*atm/?K*mol * ?K temp) * 10^6 umol/mol
((1*data_merge$CH4_dry_L)/(0.08206*(data_merge$avg_respT+273)))*10^6
# CO2
data_merge$CO2_dry_mmol=
# (atm pressure * L CO2) / (R in L*atm/?K*mol * ?K temp) * 10^3 mmol/mol
((1*data_merge$CO2_dry_L)/(0.08206*(data_merge$avg_respT+273)))*10^3
## Identify start of fluxes
Time_start <- meta_TMI[,c("fDOY_start","sample")]
flux.times=unique(Time_start$fDOY_start)
# Create new dataframes to hold final fluxes
fluxes.CH4=data.frame(matrix(NA,nrow=length(flux.times)))
fluxes.CO2=data.frame(matrix(NA,nrow=length(flux.times)))
## Add named columns
# CH4
fluxes.CH4$Time_start=flux.times
fluxes.CH4$flux.CH4=0
fluxes.CH4$R2.CH4=0
fluxes.CH4$p.CH4=0
# CO2
fluxes.CO2$Time_start=flux.times
fluxes.CO2$flux.CO2=0
fluxes.CO2$R2.CO2=0
fluxes.CO2$p.CO2=0
## Remove initial empty column
fluxes.CO2=fluxes.CO2[,-1]
fluxes.CH4=fluxes.CH4[,-1]
## For each start time
for (i in flux.times) {
## CH4 ##
# Subset data for one chamber measurement
temp1=subset(data_merge,fDOY_start==i)
# Set corresponding row of output table
j=which(flux.times==i)
# Determine if start time has a CH4 flux
if (nrow(temp1)>0) {
# If so:
# Calulate flux in umol/day using linear regression
mod=with(temp1,lm(CH4_dry_umol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CH4$flux.CH4[j]=coef(mod)[2]
# R2 of slope
fluxes.CH4$R2.CH4[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CH4$p.CH4[j]=summary(mod)$coefficients[2,4]
# If not:
# Fill rows of table with NA
} else {
fluxes.CH4$flux.CH4[j]=NA
fluxes.CH4$R2.CH4[j]=NA
fluxes.CH4$p.CH4[j]=NA
}
## CO2 ##
# Subset data for one chamber measurement
temp2=subset(data_merge,fDOY_start==i)
# Calulate flux in mol/day using linear regression
mod=with(temp2,lm(CO2_dry_mmol~fDOY))
# Save flux rate and R2 and p-value of slope in corresponding row of dataframe
# flux rate
fluxes.CO2$flux.CO2[j]=coef(mod)[2]
# R2 of slope
fluxes.CO2$R2.CO2[j]=summary(mod)$r.squared
# p-value of slope
fluxes.CO2$p.CO2[j]=summary(mod)$coefficients[2,4]
}
# merge metadata back in to flux files
# CO2
meta_TMI <- meta_TMI %>%
rename(Time_start = fDOY_start)
CO2_fluxfinal <- merge(fluxes.CO2, meta_TMI, by="Time_start")
# CH4
CH4_fluxfinal <- merge(fluxes.CH4, meta_TMI, by="Time_start")
## Export fluxes as .csv file
# CO2 (units are mmol/day)
write.csv(CO2_fluxfinal,"/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv", row.names = FALSE)
# CH4 (units are umol/day)
write.csv(CH4_fluxfinal,"/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv", row.names = FALSE)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv")
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
a
b <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(flux_source), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
b
c <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
c
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(directon), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
d
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
d
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv")
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv")
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
library(ggplot2)
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
a
b <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(flux_source), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
b
c <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
c
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
d
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
View(species)
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
library(dplyr)
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
View(sp)
head(sp)
View(CH4_fluxfinal)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv")
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
# new column for methane:co2
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
View(CH4_fluxfinal)
View(CO2_fluxfinal)
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
f
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
?ylim()
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-400, 50))
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-400, 50))
f
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-1, 50))
f
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
# new column for methane:co2
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-1, 50))
e
f
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
# new column for methane:co2
CH4_fluxfinal$ch4_co2 <-  CH4_fluxfinal$flux.CH4/CO2_fluxfinal$flux.CO2
f <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = ch4_co2, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()+
scale_y_continuous(limits = c(-1, 50))
f
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
CO2_fluxfinal <- read.csv("/Users/abbeyyatsko/Downloads/CO2_fluxfinalTMI.csv")
CH4_fluxfinal<- read.csv("/Users/abbeyyatsko/Downloads/CH4_fluxfinalTMI.csv")
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
library(ggplot)
library("ggplot")
library("ggplot2")
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
a
b <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(flux_source), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
b
c <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(position), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
c
d <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(directon), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_jitter()+
theme_light()
d
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
library(dplyr)
species <- read.csv("/Users/abbeyyatsko/Downloads/Abbey termites .xlsx - Sheet1.csv")
sp <- species[c("X", "ID_cleaned")]
# merge sp and CH4flux_final
sp <- sp %>%
rename(sample = X)
CH4_fluxfinal <- merge(CH4_fluxfinal, sp, by = c("sample"))
e <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
theme_light()
e
library(dplyr)
View(CH4_fluxfinal)
View(CH4_fluxfinal)
g <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(ID_cleaned), y = flux.CH4, fill = flux_source)) +
geom_boxplot()+
geom_point(aes(col=position), position = "jitter")+
theme_light()
g
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_light()
a
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
a
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[ which(flux_souce=='s',]
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[ which(flux_souce=='s']
a <- ggplot(data = CH4_fluxfinal, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
mounds <- CH4_fluxfinal[ which(flux_source=='m']
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[ which(flux_source=='s']
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[ which(flux_source=='s',]
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
View(soils)
View(mounds)
# mounds all
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# soils all
a2 <- ggplot(data = soils, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
a1
a2
ggarrange(a1, a2, ncol=1)
library(ggpubr)
ggarrange(a1, a2, ncol=1)
# subset df to create just soils and just mounds
soils <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 's',]
mounds <- CH4_fluxfinal[CH4_fluxfinal$flux_source == 'm',]
# mounds all
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle(subtitle = “mound”)
# soils all
a2 <- ggplot(data = soils, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggarrange(a1, a2, ncol=1)
# mounds all
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle(subtitle = "mound")
# mounds all
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle(title = "mound")
# mounds all
a1 <- ggplot(data = mounds, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "mound")
# soils all
a2 <- ggplot(data = soils, aes(x = as.factor(sample), y = flux.CH4)) +
geom_boxplot()+
geom_jitter()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "soil")
ggarrange(a1, a2, ncol=1)
